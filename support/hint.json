{
	"abbreviate" : "abbreviate(names.arg, minlength = 4L, use.classes = TRUE, dot = FALSE, ",
	"acos" : "acos(x) ",
	"acosh" : "acosh(x) ",
	"addNA" : "addNA(x, ifany = FALSE) ",
	"addTaskCallback" : "addTaskCallback(f, data = NULL, name = character()) ",
	"agrep" : "agrep(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE, ",
	"agrepl" : "agrepl(pattern, x, max.distance = 0.1, costs = NULL, ignore.case = FALSE, ",
	"alist" : "alist(...) ",
	"all.equal" : "all.equal(target, current, ...) ",
	"all.equal.character" : "all.equal.character(target, current, ..., check.attributes = TRUE) ",
	"all.equal.default" : "all.equal.default(target, current, ...) ",
	"all.equal.factor" : "all.equal.factor(target, current, ..., check.attributes = TRUE) ",
	"all.equal.formula" : "all.equal.formula(target, current, ...) ",
	"all.equal.language" : "all.equal.language(target, current, ...) ",
	"all.equal.list" : "all.equal.list(target, current, ..., check.attributes = TRUE, use.names = TRUE) ",
	"all.equal.numeric" : "all.equal.numeric(target, current, tolerance = .Machine$double.eps^0.5, ",
	"all.equal.POSIXt" : "all.equal.POSIXt(target, current, ..., tolerance = 0.001, scale) ",
	"all.equal.raw" : "all.equal.raw(target, current, ..., check.attributes = TRUE) ",
	"all.names" : "all.names(expr, functions = TRUE, max.names = -1L, unique = FALSE) ",
	"all.vars" : "all.vars(expr, functions = FALSE, max.names = -1L, unique = TRUE) ",
	"anyDuplicated" : "anyDuplicated(x, incomparables = FALSE, ...) ",
	"anyDuplicated.array" : "anyDuplicated.array(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ",
	"anyDuplicated.data.frame" : "anyDuplicated.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...) ",
	"anyDuplicated.default" : "anyDuplicated.default(x, incomparables = FALSE, fromLast = FALSE, ...) ",
	"anyDuplicated.matrix" : "anyDuplicated.matrix(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ",
	"anyNA" : "anyNA(x) ",
	"anyNA.numeric_version" : "anyNA.numeric_version(x) ",
	"anyNA.POSIXlt" : "anyNA.POSIXlt(x) ",
	"aperm" : "aperm(a, perm, ...) ",
	"aperm.default" : "aperm.default(a, perm = NULL, resize = TRUE, ...) ",
	"aperm.table" : "aperm.table(a, perm = NULL, resize = TRUE, keep.class = TRUE, ...) ",
	"append" : "append(x, values, after = length(x)) ",
	"apply" : "apply(X, MARGIN, FUN, ...) ",
	"args" : "args(name) ",
	"array" : "array(data = NA, dim = length(data), dimnames = NULL) ",
	"arrayInd" : "arrayInd(ind, .dim, .dimnames = NULL, useNames = FALSE) ",
	"as.array" : "as.array(x, ...) ",
	"as.array.default" : "as.array.default(x, ...) ",
	"as.call" : "as.call(x) ",
	"as.character" : "as.character(x, ...) ",
	"as.character.condition" : "as.character.condition(x, ...) ",
	"as.character.Date" : "as.character.Date(x, ...) ",
	"as.character.default" : "as.character.default(x, ...) ",
	"as.character.error" : "as.character.error(x, ...) ",
	"as.character.factor" : "as.character.factor(x, ...) ",
	"as.character.hexmode" : "as.character.hexmode(x, ...) ",
	"as.character.numeric_version" : "as.character.numeric_version(x, ...) ",
	"as.character.octmode" : "as.character.octmode(x, ...) ",
	"as.character.POSIXt" : "as.character.POSIXt(x, ...) ",
	"as.character.srcref" : "as.character.srcref(x, useSource = TRUE, ...) ",
	"as.complex" : "as.complex(x, ...) ",
	"as.data.frame" : "as.data.frame(x, row.names = NULL, optional = FALSE, ...) ",
	"as.data.frame.array" : "as.data.frame.array(x, row.names = NULL, optional = FALSE, ...) ",
	"as.data.frame.AsIs" : "as.data.frame.AsIs(x, row.names = NULL, optional = FALSE, ...) ",
	"as.data.frame.character" : "as.data.frame.character(x, ..., stringsAsFactors = default.stringsAsFactors()) ",
	"as.data.frame.complex" : "as.data.frame.complex(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.data.frame" : "as.data.frame.data.frame(x, row.names = NULL, ...) ",
	"as.data.frame.Date" : "as.data.frame.Date(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.default" : "as.data.frame.default(x, ...) ",
	"as.data.frame.difftime" : "as.data.frame.difftime(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.factor" : "as.data.frame.factor(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.integer" : "as.data.frame.integer(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.list" : "as.data.frame.list(x, row.names = NULL, optional = FALSE, ..., stringsAsFactors = default.stringsAsFactors()) ",
	"as.data.frame.logical" : "as.data.frame.logical(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.matrix" : "as.data.frame.matrix(x, row.names = NULL, optional = FALSE, ..., stringsAsFactors = default.stringsAsFactors()) ",
	"as.data.frame.model.matrix" : "as.data.frame.model.matrix(x, row.names = NULL, optional = FALSE, ...) ",
	"as.data.frame.numeric" : "as.data.frame.numeric(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.numeric_version" : "as.data.frame.numeric_version(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.ordered" : "as.data.frame.ordered(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.POSIXct" : "as.data.frame.POSIXct(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.POSIXlt" : "as.data.frame.POSIXlt(x, row.names = NULL, optional = FALSE, ...) ",
	"as.data.frame.raw" : "as.data.frame.raw(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.data.frame.table" : "as.data.frame.table(x, row.names = NULL, ..., responseName = \"Freq\", stringsAsFactors = TRUE, ",
	"as.data.frame.ts" : "as.data.frame.ts(x, ...) ",
	"as.data.frame.vector" : "as.data.frame.vector(x, row.names = NULL, optional = FALSE, ..., nm = paste(deparse(substitute(x), ",
	"as.Date" : "as.Date(x, ...) ",
	"as.Date.character" : "as.Date.character(x, format, ...) ",
	"as.Date.date" : "as.Date.date(x, ...) ",
	"as.Date.dates" : "as.Date.dates(x, ...) ",
	"as.Date.default" : "as.Date.default(x, ...) ",
	"as.Date.factor" : "as.Date.factor(x, ...) ",
	"as.Date.numeric" : "as.Date.numeric(x, origin, ...) ",
	"as.Date.POSIXct" : "as.Date.POSIXct(x, tz = \"UTC\", ...) ",
	"as.Date.POSIXlt" : "as.Date.POSIXlt(x, ...) ",
	"as.difftime" : "as.difftime(tim, format = \"%X\", units = \"auto\") ",
	"as.double" : "as.double(x, ...) ",
	"as.double.difftime" : "as.double.difftime(x, units = \"auto\", ...) ",
	"as.double.POSIXlt" : "as.double.POSIXlt(x, ...) ",
	"as.environment" : "as.environment(x) ",
	"as.expression" : "as.expression(x, ...) ",
	"as.expression.default" : "as.expression.default(x, ...) ",
	"as.factor" : "as.factor(x) ",
	"as.function" : "as.function(x, ...) ",
	"as.function.default" : "as.function.default(x, envir = parent.frame(), ...) ",
	"as.hexmode" : "as.hexmode(x) ",
	"as.integer" : "as.integer(x, ...) ",
	"as.list" : "as.list(x, ...) ",
	"as.list.data.frame" : "as.list.data.frame(x, ...) ",
	"as.list.Date" : "as.list.Date(x, ...) ",
	"as.list.default" : "as.list.default(x, ...) ",
	"as.list.environment" : "as.list.environment(x, all.names = FALSE, ...) ",
	"as.list.factor" : "as.list.factor(x, ...) ",
	"as.list.function" : "as.list.function(x, ...) ",
	"as.list.numeric_version" : "as.list.numeric_version(x, ...) ",
	"as.list.POSIXct" : "as.list.POSIXct(x, ...) ",
	"as.logical" : "as.logical(x, ...) ",
	"as.logical.factor" : "as.logical.factor(x, ...) ",
	"as.matrix" : "as.matrix(x, ...) ",
	"as.matrix.data.frame" : "as.matrix.data.frame(x, rownames.force = NA, ...) ",
	"as.matrix.default" : "as.matrix.default(x, ...) ",
	"as.matrix.noquote" : "as.matrix.noquote(x, ...) ",
	"as.matrix.POSIXlt" : "as.matrix.POSIXlt(x, ...) ",
	"as.name" : "as.name(x) ",
	"as.null" : "as.null(x, ...) ",
	"as.null.default" : "as.null.default(x, ...) ",
	"as.numeric" : "as.numeric(x, ...) ",
	"as.numeric_version" : "as.numeric_version(x) ",
	"as.octmode" : "as.octmode(x) ",
	"as.ordered" : "as.ordered(x) ",
	"as.package_version" : "as.package_version(x) ",
	"as.pairlist" : "as.pairlist(x) ",
	"as.POSIXct" : "as.POSIXct(x, tz = \"\", ...) ",
	"as.POSIXct.date" : "as.POSIXct.date(x, ...) ",
	"as.POSIXct.Date" : "as.POSIXct.Date(x, ...) ",
	"as.POSIXct.dates" : "as.POSIXct.dates(x, ...) ",
	"as.POSIXct.default" : "as.POSIXct.default(x, tz = \"\", ...) ",
	"as.POSIXct.numeric" : "as.POSIXct.numeric(x, tz = \"\", origin, ...) ",
	"as.POSIXct.POSIXlt" : "as.POSIXct.POSIXlt(x, tz = \"\", ...) ",
	"as.POSIXlt" : "as.POSIXlt(x, tz = \"\", ...) ",
	"as.POSIXlt.character" : "as.POSIXlt.character(x, tz = \"\", format, ...) ",
	"as.POSIXlt.date" : "as.POSIXlt.date(x, ...) ",
	"as.POSIXlt.Date" : "as.POSIXlt.Date(x, ...) ",
	"as.POSIXlt.dates" : "as.POSIXlt.dates(x, ...) ",
	"as.POSIXlt.default" : "as.POSIXlt.default(x, tz = \"\", ...) ",
	"as.POSIXlt.factor" : "as.POSIXlt.factor(x, ...) ",
	"as.POSIXlt.numeric" : "as.POSIXlt.numeric(x, tz = \"\", origin, ...) ",
	"as.POSIXlt.POSIXct" : "as.POSIXlt.POSIXct(x, tz = \"\", ...) ",
	"as.qr" : "as.qr(x) ",
	"as.raw" : "as.raw(x) ",
	"as.single" : "as.single(x, ...) ",
	"as.single.default" : "as.single.default(x, ...) ",
	"as.symbol" : "as.symbol(x) ",
	"as.table" : "as.table(x, ...) ",
	"as.table.default" : "as.table.default(x, ...) ",
	"as.vector" : "as.vector(x, mode = \"any\") ",
	"as.vector.factor" : "as.vector.factor(x, mode = \"any\") ",
	"asin" : "asin(x) ",
	"asinh" : "asinh(x) ",
	"asNamespace" : "asNamespace(ns, base.OK = TRUE) ",
	"assign" : "assign(x, value, pos = -1, envir = as.environment(pos), inherits = FALSE, ",
	"atan" : "atan(x) ",
	"atanh" : "atanh(x) ",
	"attach" : "attach(what, pos = 2L, name = deparse(substitute(what)), warn.conflicts = TRUE) ",
	"attachNamespace" : "attachNamespace(ns, pos = 2L, depends = NULL) ",
	"attr" : "attr(x, which, exact = FALSE) ",
	"attr.all.equal" : "attr.all.equal(target, current, ..., check.attributes = TRUE, check.names = TRUE) ",
	"attributes" : "attributes(obj) ",
	"autoload" : "autoload(name, package, reset = FALSE, ...) ",
	"autoloader" : "autoloader(name, package, ...) ",
	"backsolve" : "backsolve(r, x, k = ncol(r), upper.tri = TRUE, transpose = FALSE) ",
	"baseenv" : "baseenv() ",
	"basename" : "basename(path) ",
	"besselI" : "besselI(x, nu, expon.scaled = FALSE) ",
	"besselJ" : "besselJ(x, nu) ",
	"besselK" : "besselK(x, nu, expon.scaled = FALSE) ",
	"besselY" : "besselY(x, nu) ",
	"beta" : "beta(a, b) ",
	"bindingIsActive" : "bindingIsActive(sym, env) ",
	"bindingIsLocked" : "bindingIsLocked(sym, env) ",
	"bindtextdomain" : "bindtextdomain(domain, dirname = NULL) ",
	"bitwAnd" : "bitwAnd(a, b) ",
	"bitwNot" : "bitwNot(a) ",
	"bitwOr" : "bitwOr(a, b) ",
	"bitwShiftL" : "bitwShiftL(a, n) ",
	"bitwShiftR" : "bitwShiftR(a, n) ",
	"bitwXor" : "bitwXor(a, b) ",
	"body" : "body(fun = sys.function(sys.parent())) ",
	"bquote" : "bquote(expr, where = parent.frame()) ",
	"browser" : "browser(text = \"\", condition = NULL, expr = TRUE, skipCalls = 0L) ",
	"browserCondition" : "browserCondition(n = 1L) ",
	"browserSetDebug" : "browserSetDebug(n = 1L) ",
	"browserText" : "browserText(n = 1L) ",
	"builtins" : "builtins(internal = FALSE) ",
	"by.data.frame" : "by.data.frame(data, INDICES, FUN, ..., simplify = TRUE) ",
	"by.default" : "by.default(data, INDICES, FUN, ..., simplify = TRUE) ",
	"bzfile" : "bzfile(description, open = \"\", encoding = getOption(\"encoding\"), ",
	"c.Date" : "c.Date(..., recursive = FALSE) ",
	"c.noquote" : "c.noquote(..., recursive = FALSE) ",
	"c.numeric_version" : "c.numeric_version(..., recursive = FALSE) ",
	"c.POSIXct" : "c.POSIXct(..., recursive = FALSE) ",
	"c.POSIXlt" : "c.POSIXlt(..., recursive = FALSE) ",
	"c.warnings" : "c.warnings(..., recursive = FALSE) ",
	"call" : "call(name, ...) ",
	"callCC" : "callCC(fun) ",
	"capabilities" : "capabilities(what = NULL) ",
	"casefold" : "casefold(x, upper = FALSE) ",
	"cbind" : "cbind(..., deparse.level = 1) ",
	"cbind.data.frame" : "cbind.data.frame(..., deparse.level = 1) ",
	"ceiling" : "ceiling(x) ",
	"char.expand" : "char.expand(input, target, nomatch = stop(\"no match\")) ",
	"character" : "character(length = 0L) ",
	"charmatch" : "charmatch(x, table, nomatch = NA_integer_) ",
	"charToRaw" : "charToRaw(x) ",
	"chartr" : "chartr(old, new, x) ",
	"check_tzones" : "check_tzones(...) ",
	"chol" : "chol(x, ...) ",
	"chol.default" : "chol.default(x, pivot = FALSE, LINPACK = FALSE, tol = -1, ...) ",
	"choose" : "choose(n, k) ",
	"class" : "class(x) ",
	"clearPushBack" : "clearPushBack(connection) ",
	"close" : "close(con, ...) ",
	"close.connection" : "close.connection(con, type = \"rw\", ...) ",
	"close.srcfile" : "close.srcfile(con, ...) ",
	"close.srcfilealias" : "close.srcfilealias(con, ...) ",
	"closeAllConnections" : "closeAllConnections() ",
	"colMeans" : "colMeans(x, na.rm = FALSE, dims = 1L) ",
	"colnames" : "colnames(x, do.NULL = TRUE, prefix = \"col\") ",
	"colSums" : "colSums(x, na.rm = FALSE, dims = 1L) ",
	"commandArgs" : "commandArgs(trailingOnly = FALSE) ",
	"comment" : "comment(x) ",
	"complex" : "complex(length.out = 0L, real = numeric(), imaginary = numeric(), ",
	"computeRestarts" : "computeRestarts(cond = NULL) ",
	"conditionCall" : "conditionCall(c) ",
	"conditionCall.condition" : "conditionCall.condition(c) ",
	"conditionMessage" : "conditionMessage(c) ",
	"conditionMessage.condition" : "conditionMessage.condition(c) ",
	"conflicts" : "conflicts(where = search(), detail = FALSE) ",
	"Conj" : "Conj(z) ",
	"contributors" : "contributors() ",
	"cosh" : "cosh(x) ",
	"cospi" : "cospi(x) ",
	"crossprod" : "crossprod(x, y = NULL) ",
	"Cstack_info" : "Cstack_info() ",
	"cummax" : "cummax(x) ",
	"cummin" : "cummin(x) ",
	"cumprod" : "cumprod(x) ",
	"cumsum" : "cumsum(x) ",
	"cut.Date" : "cut.Date(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ",
	"cut.default" : "cut.default(x, breaks, labels = NULL, include.lowest = FALSE, right = TRUE, ",
	"cut.POSIXt" : "cut.POSIXt(x, breaks, labels = NULL, start.on.monday = TRUE, right = FALSE, ",
	"data.class" : "data.class(x) ",
	"data.frame" : "data.frame(..., row.names = NULL, check.rows = FALSE, check.names = TRUE, ",
	"data.matrix" : "data.matrix(frame, rownames.force = NA) ",
	"date" : "date() ",
	"debug" : "debug(fun, text = \"\", condition = NULL) ",
	"debugonce" : "debugonce(fun, text = \"\", condition = NULL) ",
	"default.stringsAsFactors" : "default.stringsAsFactors() ",
	"delayedAssign" : "delayedAssign(x, value, eval.env = parent.frame(1), assign.env = parent.frame(1)) ",
	"deparse" : "deparse(expr, width.cutoff = 60L, backtick = mode(expr) %in% ",
	"detach" : "detach(name, pos = 2L, unload = FALSE, character.only = FALSE, ",
	"determinant" : "determinant(x, logarithm = TRUE, ...) ",
	"determinant.matrix" : "determinant.matrix(x, logarithm = TRUE, ...) ",
	"dget" : "dget(file) ",
	"diag" : "diag(x = 1, nrow, ncol) ",
	"diff" : "diff(x, ...) ",
	"diff.Date" : "diff.Date(x, lag = 1L, differences = 1L, ...) ",
	"diff.default" : "diff.default(x, lag = 1L, differences = 1L, ...) ",
	"diff.POSIXt" : "diff.POSIXt(x, lag = 1L, differences = 1L, ...) ",
	"difftime" : "difftime(time1, time2, tz, units = c(\"auto\", \"secs\", \"mins\", ",
	"digamma" : "digamma(x) ",
	"dim.data.frame" : "dim.data.frame(x) ",
	"dimnames" : "dimnames(x) ",
	"dimnames.data.frame" : "dimnames.data.frame(x) ",
	"dir.create" : "dir.create(path, showWarnings = TRUE, recursive = FALSE, mode = \"0777\") ",
	"dirname" : "dirname(path) ",
	"do.call" : "do.call(what, args, quote = FALSE, envir = parent.frame()) ",
	"dontCheck" : "dontCheck(x) ",
	"double" : "double(length = 0L) ",
	"dput" : "dput(x, file = \"\", control = c(\"keepNA\", \"keepInteger\", ",
	"dQuote" : "dQuote(x) ",
	"drop" : "drop(x) ",
	"droplevels" : "droplevels(x, ...) ",
	"droplevels.data.frame" : "droplevels.data.frame(x, except = NULL, ...) ",
	"droplevels.factor" : "droplevels.factor(x, ...) ",
	"dump" : "dump(list, file = \"dumpdata.R\", append = FALSE, control = \"all\", ",
	"duplicated" : "duplicated(x, incomparables = FALSE, ...) ",
	"duplicated.array" : "duplicated.array(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ",
	"duplicated.data.frame" : "duplicated.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...) ",
	"duplicated.default" : "duplicated.default(x, incomparables = FALSE, fromLast = FALSE, nmax = NA, ",
	"duplicated.matrix" : "duplicated.matrix(x, incomparables = FALSE, MARGIN = 1L, fromLast = FALSE, ",
	"duplicated.numeric_version" : "duplicated.numeric_version(x, incomparables = FALSE, ...) ",
	"duplicated.POSIXlt" : "duplicated.POSIXlt(x, incomparables = FALSE, ...) ",
	"dyn.load" : "dyn.load(x, local = TRUE, now = TRUE, ...) ",
	"dyn.unload" : "dyn.unload(x) ",
	"eapply" : "eapply(env, FUN, ..., all.names = FALSE, USE.NAMES = TRUE) ",
	"eigen" : "eigen(x, symmetric, only.values = FALSE, EISPACK = FALSE) ",
	"emptyenv" : "emptyenv() ",
	"encodeString" : "encodeString(x, width = 0L, quote = \"\", na.encode = TRUE, justify = c(\"left\", ",
	"Encoding" : "Encoding(x) ",
	"enquote" : "enquote(cl) ",
	"env.profile" : "env.profile(env) ",
	"environment" : "environment(fun = NULL) ",
	"environmentIsLocked" : "environmentIsLocked(env) ",
	"environmentName" : "environmentName(env) ",
	"eval" : "eval(expr, envir = parent.frame(), enclos = if (is.list(envir) || ",
	"eval.parent" : "eval.parent(expr, n = 1) ",
	"evalq" : "evalq(expr, envir = parent.frame(), enclos = if (is.list(envir) || ",
	"exists" : "exists(x, where = -1, envir = if (missing(frame)) as.environment(where) else sys.frame(frame), ",
	"expand.grid" : "expand.grid(..., KEEP.OUT.ATTRS = TRUE, stringsAsFactors = TRUE) ",
	"expression" : "expression(...) ",
	"factor" : "factor(x = character(), levels, labels = levels, exclude = NA, ",
	"factorial" : "factorial(x) ",
	"fifo" : "fifo(description, open = \"\", blocking = FALSE, encoding = getOption(\"encoding\")) ",
	"file" : "file(description = \"\", open = \"\", blocking = TRUE, encoding = getOption(\"encoding\"), ",
	"file.access" : "file.access(names, mode = 0) ",
	"file.append" : "file.append(file1, file2) ",
	"file.choose" : "file.choose(new = FALSE) ",
	"file.copy" : "file.copy(from, to, overwrite = recursive, recursive = FALSE, ",
	"file.create" : "file.create(..., showWarnings = TRUE) ",
	"file.exists" : "file.exists(...) ",
	"file.info" : "file.info(...) ",
	"file.link" : "file.link(from, to) ",
	"file.path" : "file.path(..., fsep = .Platform$file.sep) ",
	"file.remove" : "file.remove(...) ",
	"file.rename" : "file.rename(from, to) ",
	"file.show" : "file.show(..., header = rep(\"\", nfiles), title = \"R Information\", ",
	"file.symlink" : "file.symlink(from, to) ",
	"Filter" : "Filter(f, x) ",
	"Find" : "Find(f, x, right = FALSE, nomatch = NULL) ",
	"find.package" : "find.package(package = NULL, lib.loc = NULL, quiet = FALSE, verbose = getOption(\"verbose\")) ",
	"findInterval" : "findInterval(x, vec, rightmost.closed = FALSE, all.inside = FALSE) ",
	"findPackageEnv" : "findPackageEnv(info) ",
	"findRestart" : "findRestart(name, cond = NULL) ",
	"floor" : "floor(x) ",
	"flush" : "flush(con) ",
	"flush.connection" : "flush.connection(con) ",
	"force" : "force(x) ",
	"formals" : "formals(fun = sys.function(sys.parent())) ",
	"format" : "format(x, ...) ",
	"format.AsIs" : "format.AsIs(x, width = 12, ...) ",
	"format.data.frame" : "format.data.frame(x, ..., justify = \"none\") ",
	"format.Date" : "format.Date(x, ...) ",
	"format.default" : "format.default(x, trim = FALSE, digits = NULL, nsmall = 0L, justify = c(\"left\", ",
	"format.difftime" : "format.difftime(x, ...) ",
	"format.factor" : "format.factor(x, ...) ",
	"format.hexmode" : "format.hexmode(x, width = NULL, upper.case = FALSE, ...) ",
	"format.info" : "format.info(x, digits = NULL, nsmall = 0L) ",
	"format.libraryIQR" : "format.libraryIQR(x, ...) ",
	"format.numeric_version" : "format.numeric_version(x, ...) ",
	"format.octmode" : "format.octmode(x, width = NULL, ...) ",
	"format.packageInfo" : "format.packageInfo(x, ...) ",
	"format.POSIXct" : "format.POSIXct(x, format = \"\", tz = \"\", usetz = FALSE, ...) ",
	"format.POSIXlt" : "format.POSIXlt(x, format = \"\", usetz = FALSE, ...) ",
	"format.pval" : "format.pval(pv, digits = max(1L, getOption(\"digits\") - 2L), eps = .Machine$double.eps, ",
	"format.summaryDefault" : "format.summaryDefault(x, ...) ",
	"formatC" : "formatC(x, digits = NULL, width = NULL, format = NULL, flag = \"\", ",
	"formatDL" : "formatDL(x, y, style = c(\"table\", \"list\"), width = 0.9 * getOption(\"width\"), ",
	"forwardsolve" : "forwardsolve(l, x, k = ncol(l), upper.tri = FALSE, transpose = FALSE) ",
	"gamma" : "gamma(x) ",
	"gc.time" : "gc.time(on = TRUE) ",
	"gcinfo" : "gcinfo(verbose) ",
	"gctorture" : "gctorture(on = TRUE) ",
	"getAllConnections" : "getAllConnections() ",
	"getCallingDLL" : "getCallingDLL(f = sys.function(-1), doStop = FALSE) ",
	"getCallingDLLe" : "getCallingDLLe(e) ",
	"getConnection" : "getConnection(what) ",
	"getDLLRegisteredRoutines" : "getDLLRegisteredRoutines(dll, addNames = TRUE) ",
	"getDLLRegisteredRoutines.character" : "getDLLRegisteredRoutines.character(dll, addNames = TRUE) ",
	"getDLLRegisteredRoutines.DLLInfo" : "getDLLRegisteredRoutines.DLLInfo(dll, addNames = TRUE) ",
	"getElement" : "getElement(object, name) ",
	"geterrmessage" : "geterrmessage() ",
	"getExportedValue" : "getExportedValue(ns, name) ",
	"getHook" : "getHook(hookName) ",
	"getLoadedDLLs" : "getLoadedDLLs() ",
	"getNamespace" : "getNamespace(name) ",
	"getNamespaceExports" : "getNamespaceExports(ns) ",
	"getNamespaceImports" : "getNamespaceImports(ns) ",
	"getNamespaceInfo" : "getNamespaceInfo(ns, which) ",
	"getNamespaceName" : "getNamespaceName(ns) ",
	"getNamespaceUsers" : "getNamespaceUsers(ns) ",
	"getNamespaceVersion" : "getNamespaceVersion(ns) ",
	"getNativeSymbolInfo" : "getNativeSymbolInfo(name, PACKAGE, unlist = TRUE, withRegistrationInfo = FALSE) ",
	"getOption" : "getOption(x, default = NULL) ",
	"getRversion" : "getRversion() ",
	"getSrcLines" : "getSrcLines(srcfile, first, last) ",
	"getTaskCallbackNames" : "getTaskCallbackNames() ",
	"gettext" : "gettext(..., domain = NULL) ",
	"gettextf" : "gettextf(fmt, ..., domain = NULL) ",
	"getwd" : "getwd() ",
	"globalenv" : "globalenv() ",
	"gregexpr" : "gregexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, ",
	"grep" : "grep(pattern, x, ignore.case = FALSE, perl = FALSE, value = FALSE, ",
	"grepl" : "grepl(pattern, x, ignore.case = FALSE, perl = FALSE, fixed = FALSE, ",
	"grepRaw" : "grepRaw(pattern, x, offset = 1L, ignore.case = FALSE, value = FALSE, ",
	"gsub" : "gsub(pattern, replacement, x, ignore.case = FALSE, perl = FALSE, ",
	"gzcon" : "gzcon(con, level = 6, allowNonCompressed = TRUE) ",
	"gzfile" : "gzfile(description, open = \"\", encoding = getOption(\"encoding\"), ",
	"iconv" : "iconv(x, from = \"\", to = \"\", sub = NA, mark = TRUE, toRaw = FALSE) ",
	"iconvlist" : "iconvlist() ",
	"icuGetCollate" : "icuGetCollate(type = c(\"actual\", \"valid\")) ",
	"icuSetCollate" : "icuSetCollate(...) ",
	"identical" : "identical(x, y, num.eq = TRUE, single.NA = TRUE, attrib.as.set = TRUE, ",
	"identity" : "identity(x) ",
	"ifelse" : "ifelse(test, yes, no) ",
	"importIntoEnv" : "importIntoEnv(impenv, impnames, expenv, expnames) ",
	"inherits" : "inherits(x, what, which = FALSE) ",
	"integer" : "integer(length = 0L) ",
	"interaction" : "interaction(..., drop = FALSE, sep = \".\", lex.order = FALSE) ",
	"interactive" : "interactive() ",
	"intersect" : "intersect(x, y) ",
	"intToBits" : "intToBits(x) ",
	"inverse.rle" : "inverse.rle(x, ...) ",
	"invisible" : "invisible(x) ",
	"invokeRestart" : "invokeRestart(r, ...) ",
	"invokeRestartInteractively" : "invokeRestartInteractively(r) ",
	"is.array" : "is.array(x) ",
	"is.atomic" : "is.atomic(x) ",
	"is.call" : "is.call(x) ",
	"is.character" : "is.character(x) ",
	"is.complex" : "is.complex(x) ",
	"is.data.frame" : "is.data.frame(x) ",
	"is.double" : "is.double(x) ",
	"is.element" : "is.element(el, set) ",
	"is.environment" : "is.environment(x) ",
	"is.expression" : "is.expression(x) ",
	"is.factor" : "is.factor(x) ",
	"is.finite" : "is.finite(x) ",
	"is.function" : "is.function(x) ",
	"is.infinite" : "is.infinite(x) ",
	"is.integer" : "is.integer(x) ",
	"is.language" : "is.language(x) ",
	"is.list" : "is.list(x) ",
	"is.loaded" : "is.loaded(symbol, PACKAGE = \"\", type = \"\") ",
	"is.logical" : "is.logical(x) ",
	"is.matrix" : "is.matrix(x) ",
	"is.na" : "is.na(x) ",
	"is.na.data.frame" : "is.na.data.frame(x) ",
	"is.na.numeric_version" : "is.na.numeric_version(x) ",
	"is.na.POSIXlt" : "is.na.POSIXlt(x) ",
	"is.name" : "is.name(x) ",
	"is.nan" : "is.nan(x) ",
	"is.null" : "is.null(x) ",
	"is.numeric" : "is.numeric(x) ",
	"is.numeric_version" : "is.numeric_version(x) ",
	"is.numeric.Date" : "is.numeric.Date(x) ",
	"is.numeric.difftime" : "is.numeric.difftime(x) ",
	"is.numeric.POSIXt" : "is.numeric.POSIXt(x) ",
	"is.object" : "is.object(x) ",
	"is.ordered" : "is.ordered(x) ",
	"is.package_version" : "is.package_version(x) ",
	"is.pairlist" : "is.pairlist(x) ",
	"is.primitive" : "is.primitive(x) ",
	"is.qr" : "is.qr(x) ",
	"is.R" : "is.R() ",
	"is.raw" : "is.raw(x) ",
	"is.recursive" : "is.recursive(x) ",
	"is.single" : "is.single(x) ",
	"is.symbol" : "is.symbol(x) ",
	"is.table" : "is.table(x) ",
	"is.unsorted" : "is.unsorted(x, na.rm = FALSE, strictly = FALSE) ",
	"is.vector" : "is.vector(x, mode = \"any\") ",
	"isatty" : "isatty(con) ",
	"isBaseNamespace" : "isBaseNamespace(ns) ",
	"isdebugged" : "isdebugged(fun) ",
	"isIncomplete" : "isIncomplete(con) ",
	"isNamespace" : "isNamespace(ns) ",
	"ISOdate" : "ISOdate(year, month, day, hour = 12, min = 0, sec = 0, tz = \"GMT\") ",
	"ISOdatetime" : "ISOdatetime(year, month, day, hour, min, sec, tz = \"\") ",
	"isOpen" : "isOpen(con, rw = \"\") ",
	"isRestart" : "isRestart(x) ",
	"isSeekable" : "isSeekable(con) ",
	"isSymmetric" : "isSymmetric(object, ...) ",
	"isSymmetric.matrix" : "isSymmetric.matrix(object, tol = 100 * .Machine$double.eps, ...) ",
	"isTRUE" : "isTRUE(x) ",
	"jitter" : "jitter(x, factor = 1, amount = NULL) ",
	"julian" : "julian(x, ...) ",
	"julian.Date" : "julian.Date(x, origin = as.Date(\"1970-01-01\"), ...) ",
	"julian.POSIXt" : "julian.POSIXt(x, origin = as.POSIXct(\"1970-01-01\", tz = \"GMT\"), ...) ",
	"kappa" : "kappa(z, ...) ",
	"kappa.default" : "kappa.default(z, exact = FALSE, norm = NULL, method = c(\"qr\", \"direct\"), ",
	"kappa.lm" : "kappa.lm(z, ...) ",
	"kappa.qr" : "kappa.qr(z, ...) ",
	"kronecker" : "kronecker(X, Y, FUN = \"*\", make.dimnames = FALSE, ...) ",
	"La_version" : "La_version() ",
	"La.svd" : "La.svd(x, nu = min(n, p), nv = min(n, p)) ",
	"labels" : "labels(object, ...) ",
	"labels.default" : "labels.default(object, ...) ",
	"lapply" : "lapply(X, FUN, ...) ",
	"lazyLoad" : "lazyLoad(filebase, envir = parent.frame(), filter) ",
	"lazyLoadDBexec" : "lazyLoadDBexec(filebase, fun, filter) ",
	"lazyLoadDBfetch" : "lazyLoadDBfetch(key, file, compressed, hook) ",
	"lbeta" : "lbeta(a, b) ",
	"lchoose" : "lchoose(n, k) ",
	"length" : "length(x) ",
	"length.POSIXlt" : "length.POSIXlt(x) ",
	"levels" : "levels(x) ",
	"levels.default" : "levels.default(x) ",
	"lfactorial" : "lfactorial(x) ",
	"lgamma" : "lgamma(x) ",
	"library" : "library(package, help, pos = 2, lib.loc = NULL, character.only = FALSE, ",
	"library.dynam" : "library.dynam(chname, package, lib.loc, verbose = getOption(\"verbose\"), ",
	"library.dynam.unload" : "library.dynam.unload(chname, libpath, verbose = getOption(\"verbose\"), file.ext = .Platform$dynlib.ext) ",
	"licence" : "licence() ",
	"license" : "license() ",
	"list" : "list(...) ",
	"list.dirs" : "list.dirs(path = \".\", full.names = TRUE, recursive = TRUE) ",
	"list.files" : "list.files(path = \".\", pattern = NULL, all.files = FALSE, full.names = FALSE, ",
	"load" : "load(file, envir = parent.frame(), verbose = FALSE) ",
	"loadedNamespaces" : "loadedNamespaces() ",
	"loadingNamespaceInfo" : "loadingNamespaceInfo() ",
	"loadNamespace" : "loadNamespace(package, lib.loc = NULL, keep.source = getOption(\"keep.source.pkgs\"), ",
	"local" : "local(expr, envir = new.env()) ",
	"lockBinding" : "lockBinding(sym, env) ",
	"lockEnvironment" : "lockEnvironment(env, bindings = FALSE) ",
	"logb" : "logb(x, base = exp(1)) ",
	"logical" : "logical(length = 0L) ",
	"lower.tri" : "lower.tri(x, diag = FALSE) ",
	"make.names" : "make.names(names, unique = FALSE, allow_ = TRUE) ",
	"make.unique" : "make.unique(names, sep = \".\") ",
	"makeActiveBinding" : "makeActiveBinding(sym, fun, env) ",
	"mapply" : "mapply(FUN, ..., MoreArgs = NULL, SIMPLIFY = TRUE, USE.NAMES = TRUE) ",
	"margin.table" : "margin.table(x, margin = NULL) ",
	"mat.or.vec" : "mat.or.vec(nr, nc) ",
	"match" : "match(x, table, nomatch = NA_integer_, incomparables = NULL) ",
	"match.arg" : "match.arg(arg, choices, several.ok = FALSE) ",
	"match.call" : "match.call(definition = NULL, call = sys.call(sys.parent()), expand.dots = TRUE) ",
	"match.fun" : "match.fun(FUN, descend = TRUE) ",
	"Math.data.frame" : "Math.data.frame(x, ...) ",
	"Math.Date" : "Math.Date(x, ...) ",
	"Math.difftime" : "Math.difftime(x, ...) ",
	"Math.factor" : "Math.factor(x, ...) ",
	"Math.POSIXt" : "Math.POSIXt(x, ...) ",
	"matrix" : "matrix(data = NA, nrow = 1, ncol = 1, byrow = FALSE, dimnames = NULL) ",
	"max.col" : "max.col(m, ties.method = c(\"random\", \"first\", \"last\")) ",
	"mean" : "mean(x, ...) ",
	"mean.Date" : "mean.Date(x, ...) ",
	"mean.default" : "mean.default(x, trim = 0, na.rm = FALSE, ...) ",
	"mean.difftime" : "mean.difftime(x, ...) ",
	"mean.POSIXct" : "mean.POSIXct(x, ...) ",
	"mean.POSIXlt" : "mean.POSIXlt(x, ...) ",
	"mem.limits" : "mem.limits(nsize = NA, vsize = NA) ",
	"memCompress" : "memCompress(from, type = c(\"gzip\", \"bzip2\", \"xz\", \"none\")) ",
	"memDecompress" : "memDecompress(from, type = c(\"unknown\", \"gzip\", \"bzip2\", \"xz\", \"none\"), ",
	"memory.profile" : "memory.profile() ",
	"merge" : "merge(x, y, ...) ",
	"merge.data.frame" : "merge.data.frame(x, y, by = intersect(names(x), names(y)), by.x = by, ",
	"merge.default" : "merge.default(x, y, ...) ",
	"message" : "message(..., domain = NULL, appendLF = TRUE) ",
	"mget" : "mget(x, envir = as.environment(-1L), mode = \"any\", ifnotfound, ",
	"missing" : "missing(x) ",
	"mode" : "mode(x) ",
	"months" : "months(x, abbreviate) ",
	"months.Date" : "months.Date(x, abbreviate = FALSE) ",
	"months.POSIXt" : "months.POSIXt(x, abbreviate = FALSE) ",
	"names" : "names(x) ",
	"names.POSIXlt" : "names.POSIXlt(x) ",
	"namespaceExport" : "namespaceExport(ns, vars) ",
	"namespaceImport" : "namespaceImport(self, ..., from = NULL) ",
	"namespaceImportClasses" : "namespaceImportClasses(self, ns, vars, from = NULL) ",
	"namespaceImportFrom" : "namespaceImportFrom(self, ns, vars, generics, packages, from = \"non-package environment\") ",
	"namespaceImportMethods" : "namespaceImportMethods(self, ns, vars, from = NULL) ",
	"nargs" : "nargs() ",
	"nchar" : "nchar(x, type = \"chars\", allowNA = FALSE) ",
	"ncol" : "ncol(x) ",
	"NCOL" : "NCOL(x) ",
	"Negate" : "Negate(f) ",
	"new.env" : "new.env(hash = TRUE, parent = parent.frame(), size = 29L) ",
	"NextMethod" : "NextMethod(generic = NULL, object = NULL, ...) ",
	"ngettext" : "ngettext(n, msg1, msg2, domain = NULL) ",
	"nlevels" : "nlevels(x) ",
	"noquote" : "noquote(obj) ",
	"norm" : "norm(x, type = c(\"O\", \"I\", \"F\", \"M\", \"2\")) ",
	"normalizePath" : "normalizePath(path, winslash = \"\\\\\", mustWork = NA) ",
	"nrow" : "nrow(x) ",
	"NROW" : "NROW(x) ",
	"numeric" : "numeric(length = 0L) ",
	"numeric_version" : "numeric_version(x, strict = TRUE) ",
	"nzchar" : "nzchar(x) ",
	"objects" : "objects(name, pos = -1L, envir = as.environment(pos), all.names = FALSE, ",
	"oldClass" : "oldClass(x) ",
	"OlsonNames" : "OlsonNames() ",
	"on.exit" : "on.exit(expr = NULL, add = FALSE) ",
	"open" : "open(con, ...) ",
	"open.connection" : "open.connection(con, open = \"r\", blocking = TRUE, ...) ",
	"open.srcfile" : "open.srcfile(con, line, ...) ",
	"open.srcfilealias" : "open.srcfilealias(con, line, ...) ",
	"open.srcfilecopy" : "open.srcfilecopy(con, line, ...) ",
	"Ops.data.frame" : "Ops.data.frame(e1, e2 = NULL) ",
	"Ops.Date" : "Ops.Date(e1, e2) ",
	"Ops.difftime" : "Ops.difftime(e1, e2) ",
	"Ops.factor" : "Ops.factor(e1, e2) ",
	"Ops.numeric_version" : "Ops.numeric_version(e1, e2) ",
	"Ops.ordered" : "Ops.ordered(e1, e2) ",
	"Ops.POSIXt" : "Ops.POSIXt(e1, e2) ",
	"options" : "options(...) ",
	"order" : "order(..., na.last = TRUE, decreasing = FALSE) ",
	"ordered" : "ordered(x, ...) ",
	"outer" : "outer(X, Y, FUN = \"*\", ...) ",
	"package_version" : "package_version(x, strict = TRUE) ",
	"packageEvent" : "packageEvent(pkgname, event = c(\"onLoad\", \"attach\", \"detach\", \"onUnload\")) ",
	"packageHasNamespace" : "packageHasNamespace(package, package.lib) ",
	"packageStartupMessage" : "packageStartupMessage(..., domain = NULL, appendLF = TRUE) ",
	"packBits" : "packBits(x, type = c(\"raw\", \"integer\")) ",
	"pairlist" : "pairlist(...) ",
	"parent.env" : "parent.env(env) ",
	"parent.frame" : "parent.frame(n = 1) ",
	"parse" : "parse(file = \"\", n = NULL, text = NULL, prompt = \"?\", keep.source = getOption(\"keep.source\"), ",
	"parseNamespaceFile" : "parseNamespaceFile(package, package.lib, mustExist = TRUE) ",
	"paste" : "paste(..., sep = \" \", collapse = NULL) ",
	"path.expand" : "path.expand(path) ",
	"path.package" : "path.package(package = NULL, quiet = FALSE) ",
	"pipe" : "pipe(description, open = \"\", encoding = getOption(\"encoding\")) ",
	"pmatch" : "pmatch(x, table, nomatch = NA_integer_, duplicates.ok = FALSE) ",
	"pmax" : "pmax(..., na.rm = FALSE) ",
	"pmax.int" : "pmax.int(..., na.rm = FALSE) ",
	"pmin" : "pmin(..., na.rm = FALSE) ",
	"pmin.int" : "pmin.int(..., na.rm = FALSE) ",
	"polyroot" : "polyroot(z) ",
	"pos.to.env" : "pos.to.env(x) ",
	"Position" : "Position(f, x, right = FALSE, nomatch = NA_integer_) ",
	"pretty" : "pretty(x, ...) ",
	"pretty.default" : "pretty.default(x, n = 5, min.n = n%/%3, shrink.sml = 0.75, high.u.bias = 1.5, ",
	"prettyNum" : "prettyNum(x, big.mark = \"\", big.interval = 3L, small.mark = \"\", ",
	"print" : "print(x, ...) ",
	"print.AsIs" : "print.AsIs(x, ...) ",
	"print.by" : "print.by(x, ..., vsep) ",
	"print.condition" : "print.condition(x, ...) ",
	"print.connection" : "print.connection(x, ...) ",
	"print.data.frame" : "print.data.frame(x, ..., digits = NULL, quote = FALSE, right = TRUE, ",
	"print.Date" : "print.Date(x, max = NULL, ...) ",
	"print.default" : "print.default(x, digits = NULL, quote = TRUE, na.print = NULL, print.gap = NULL, ",
	"print.difftime" : "print.difftime(x, digits = getOption(\"digits\"), ...) ",
	"print.DLLInfo" : "print.DLLInfo(x, ...) ",
	"print.DLLInfoList" : "print.DLLInfoList(x, ...) ",
	"print.DLLRegisteredRoutines" : "print.DLLRegisteredRoutines(x, ...) ",
	"print.factor" : "print.factor(x, quote = FALSE, max.levels = NULL, width = getOption(\"width\"), ",
	"print.function" : "print.function(x, useSource = TRUE, ...) ",
	"print.hexmode" : "print.hexmode(x, ...) ",
	"print.libraryIQR" : "print.libraryIQR(x, ...) ",
	"print.listof" : "print.listof(x, ...) ",
	"print.NativeRoutineList" : "print.NativeRoutineList(x, ...) ",
	"print.noquote" : "print.noquote(x, ...) ",
	"print.numeric_version" : "print.numeric_version(x, ...) ",
	"print.octmode" : "print.octmode(x, ...) ",
	"print.packageInfo" : "print.packageInfo(x, ...) ",
	"print.POSIXct" : "print.POSIXct(x, ...) ",
	"print.POSIXlt" : "print.POSIXlt(x, ...) ",
	"print.proc_time" : "print.proc_time(x, ...) ",
	"print.restart" : "print.restart(x, ...) ",
	"print.rle" : "print.rle(x, digits = getOption(\"digits\"), prefix = \"\", ...) ",
	"print.simple.list" : "print.simple.list(x, ...) ",
	"print.srcfile" : "print.srcfile(x, ...) ",
	"print.srcref" : "print.srcref(x, useSource = TRUE, ...) ",
	"print.summary.table" : "print.summary.table(x, digits = max(1L, getOption(\"digits\") - 3L), ...) ",
	"print.summaryDefault" : "print.summaryDefault(x, ...) ",
	"print.table" : "print.table(x, digits = getOption(\"digits\"), quote = FALSE, na.print = \"\", ",
	"print.warnings" : "print.warnings(x, ...) ",
	"prmatrix" : "prmatrix(x, rowlab = dn[[1]], collab = dn[[2]], quote = TRUE, ",
	"proc.time" : "proc.time() ",
	"prod" : "prod(..., na.rm = FALSE) ",
	"prop.table" : "prop.table(x, margin = NULL) ",
	"provideDimnames" : "provideDimnames(x, sep = \"\", base = list(LETTERS)) ",
	"psigamma" : "psigamma(x, deriv = 0L) ",
	"pushBack" : "pushBack(data, connection, newLine = TRUE, encoding = c(\"\", ",
	"pushBackLength" : "pushBackLength(connection) ",
	"qr.coef" : "qr.coef(qr, y) ",
	"qr.default" : "qr.default(x, tol = 1e-07, LAPACK = FALSE, ...) ",
	"qr.fitted" : "qr.fitted(qr, y, k = qr$rank) ",
	"qr.Q" : "qr.Q(qr, complete = FALSE, Dvec) ",
	"qr.qty" : "qr.qty(qr, y) ",
	"qr.qy" : "qr.qy(qr, y) ",
	"qr.R" : "qr.R(qr, complete = FALSE, ...) ",
	"qr.resid" : "qr.resid(qr, y) ",
	"qr.solve" : "qr.solve(a, b, tol = 1e-07) ",
	"qr.X" : "qr.X(qr, complete = FALSE, ncol = if (complete) nrow(R) else min(dim(R))) ",
	"quarters" : "quarters(x, abbreviate) ",
	"quarters.Date" : "quarters.Date(x, ...) ",
	"quarters.POSIXt" : "quarters.POSIXt(x, ...) ",
	"quit" : "quit(save = \"default\", status = 0, runLast = TRUE) ",
	"quote" : "quote(expr) ",
	"R_system_version" : "R_system_version(x, strict = TRUE) ",
	"R.home" : "R.home(component = \"home\") ",
	"R.Version" : "R.Version() ",
	"range" : "range(..., na.rm = FALSE) ",
	"range.default" : "range.default(..., na.rm = FALSE, finite = FALSE) ",
	"rank" : "rank(x, na.last = TRUE, ties.method = c(\"average\", \"first\", ",
	"rapply" : "rapply(object, f, classes = \"ANY\", deflt = NULL, how = c(\"unlist\", ",
	"rawConnection" : "rawConnection(object, open = \"r\") ",
	"rawConnectionValue" : "rawConnectionValue(con) ",
	"rawShift" : "rawShift(x, n) ",
	"rawToBits" : "rawToBits(x) ",
	"rawToChar" : "rawToChar(x, multiple = FALSE) ",
	"rbind" : "rbind(..., deparse.level = 1) ",
	"rbind.data.frame" : "rbind.data.frame(..., deparse.level = 1) ",
	"rcond" : "rcond(x, norm = c(\"O\", \"I\", \"1\"), triangular = FALSE, ...) ",
	"read.dcf" : "read.dcf(file, fields = NULL, all = FALSE, keep.white = NULL) ",
	"readBin" : "readBin(con, what, n = 1L, size = NA_integer_, signed = TRUE, ",
	"readChar" : "readChar(con, nchars, useBytes = FALSE) ",
	"readline" : "readline(prompt = \"\") ",
	"readLines" : "readLines(con = stdin(), n = -1L, ok = TRUE, warn = TRUE, encoding = \"unknown\", ",
	"readRDS" : "readRDS(file, refhook = NULL) ",
	"readRenviron" : "readRenviron(path) ",
	"Recall" : "Recall(...) ",
	"Reduce" : "Reduce(f, x, init, right = FALSE, accumulate = FALSE) ",
	"reg.finalizer" : "reg.finalizer(e, f, onexit = FALSE) ",
	"regexec" : "regexec(pattern, text, ignore.case = FALSE, fixed = FALSE, ",
	"regexpr" : "regexpr(pattern, text, ignore.case = FALSE, perl = FALSE, fixed = FALSE, ",
	"regmatches" : "regmatches(x, m, invert = FALSE) ",
	"remove" : "remove(..., list = character(), pos = -1, envir = as.environment(pos), ",
	"removeTaskCallback" : "removeTaskCallback(id) ",
	"rep_len" : "rep_len(x, length.out) ",
	"rep.Date" : "rep.Date(x, ...) ",
	"rep.factor" : "rep.factor(x, ...) ",
	"rep.int" : "rep.int(x, times) ",
	"rep.numeric_version" : "rep.numeric_version(x, ...) ",
	"rep.POSIXct" : "rep.POSIXct(x, ...) ",
	"rep.POSIXlt" : "rep.POSIXlt(x, ...) ",
	"replace" : "replace(x, list, values) ",
	"replicate" : "replicate(n, expr, simplify = \"array\") ",
	"require" : "require(package, lib.loc = NULL, quietly = FALSE, warn.conflicts = TRUE, ",
	"requireNamespace" : "requireNamespace(package, ..., quietly = FALSE) ",
	"restartDescription" : "restartDescription(r) ",
	"restartFormals" : "restartFormals(r) ",
	"retracemem" : "retracemem(x, previous = NULL) ",
	"rev.default" : "rev.default(x) ",
	"RNGkind" : "RNGkind(kind = NULL, normal.kind = NULL) ",
	"RNGversion" : "RNGversion(vstr) ",
	"round" : "round(x, digits = 0) ",
	"round.Date" : "round.Date(x, ...) ",
	"round.POSIXt" : "round.POSIXt(x, units = c(\"secs\", \"mins\", \"hours\", \"days\")) ",
	"row.names" : "row.names(x) ",
	"row.names.data.frame" : "row.names.data.frame(x) ",
	"row.names.default" : "row.names.default(x) ",
	"rowMeans" : "rowMeans(x, na.rm = FALSE, dims = 1L) ",
	"rownames" : "rownames(x, do.NULL = TRUE, prefix = \"row\") ",
	"rowsum" : "rowsum(x, group, reorder = TRUE, ...) ",
	"rowsum.data.frame" : "rowsum.data.frame(x, group, reorder = TRUE, na.rm = FALSE, ...) ",
	"rowsum.default" : "rowsum.default(x, group, reorder = TRUE, na.rm = FALSE, ...) ",
	"rowSums" : "rowSums(x, na.rm = FALSE, dims = 1L) ",
	"sample" : "sample(x, size, replace = FALSE, prob = NULL) ",
	"sample.int" : "sample.int(n, size = n, replace = FALSE, prob = NULL) ",
	"sapply" : "sapply(X, FUN, ..., simplify = TRUE, USE.NAMES = TRUE) ",
	"save" : "save(..., list = character(), file = stop(\"'file' must be specified\"), ",
	"save.image" : "save.image(file = \".RData\", version = NULL, ascii = FALSE, compress = !ascii, ",
	"saveRDS" : "saveRDS(object, file = \"\", ascii = FALSE, version = NULL, compress = TRUE, ",
	"scale" : "scale(x, center = TRUE, scale = TRUE) ",
	"scale.default" : "scale.default(x, center = TRUE, scale = TRUE) ",
	"scan" : "scan(file = \"\", what = double(), nmax = -1L, n = -1L, sep = \"\", ",
	"search" : "search() ",
	"searchpaths" : "searchpaths() ",
	"seek" : "seek(con, ...) ",
	"seek.connection" : "seek.connection(con, where = NA, origin = \"start\", rw = \"\", ...) ",
	"seq_along" : "seq_along(along.with) ",
	"seq_len" : "seq_len(length.out) ",
	"seq.Date" : "seq.Date(from, to, by, length.out = NULL, along.with = NULL, ",
	"seq.default" : "seq.default(from = 1, to = 1, by = ((to - from)/(length.out - 1)), ",
	"seq.int" : "seq.int(from, to, by, length.out, along.with, ...) ",
	"seq.POSIXt" : "seq.POSIXt(from, to, by, length.out = NULL, along.with = NULL, ",
	"sequence" : "sequence(nvec) ",
	"serialize" : "serialize(object, connection, ascii = FALSE, xdr = TRUE, version = NULL, ",
	"set.seed" : "set.seed(seed, kind = NULL, normal.kind = NULL) ",
	"setdiff" : "setdiff(x, y) ",
	"setequal" : "setequal(x, y) ",
	"setHook" : "setHook(hookName, value, action = c(\"append\", \"prepend\", \"replace\")) ",
	"setNamespaceInfo" : "setNamespaceInfo(ns, which, val) ",
	"setSessionTimeLimit" : "setSessionTimeLimit(cpu = Inf, elapsed = Inf) ",
	"setTimeLimit" : "setTimeLimit(cpu = Inf, elapsed = Inf, transient = FALSE) ",
	"setwd" : "setwd(dir) ",
	"showConnections" : "showConnections(all = FALSE) ",
	"shQuote" : "shQuote(string, type = c(\"sh\", \"csh\", \"cmd\")) ",
	"sign" : "sign(x) ",
	"signalCondition" : "signalCondition(cond) ",
	"signif" : "signif(x, digits = 6) ",
	"simpleCondition" : "simpleCondition(message, call = NULL) ",
	"simpleError" : "simpleError(message, call = NULL) ",
	"simpleMessage" : "simpleMessage(message, call = NULL) ",
	"simpleWarning" : "simpleWarning(message, call = NULL) ",
	"single" : "single(length = 0L) ",
	"sinh" : "sinh(x) ",
	"sink" : "sink(file = NULL, append = FALSE, type = c(\"output\", \"message\"), ",
	"sink.number" : "sink.number(type = c(\"output\", \"message\")) ",
	"sinpi" : "sinpi(x) ",
	"slice.index" : "slice.index(x, MARGIN) ",
	"socketConnection" : "socketConnection(host = \"localhost\", port, server = FALSE, blocking = FALSE, ",
	"socketSelect" : "socketSelect(socklist, write = FALSE, timeout = NULL) ",
	"solve" : "solve(a, b, ...) ",
	"solve.default" : "solve.default(a, b, tol = .Machine$double.eps, LINPACK = FALSE, ...) ",
	"solve.qr" : "solve.qr(a, b, ...) ",
	"sort" : "sort(x, decreasing = FALSE, ...) ",
	"sort.default" : "sort.default(x, decreasing = FALSE, na.last = NA, ...) ",
	"sort.int" : "sort.int(x, partial = NULL, na.last = NA, decreasing = FALSE, ",
	"sort.list" : "sort.list(x, partial = NULL, na.last = TRUE, decreasing = FALSE, ",
	"sort.POSIXlt" : "sort.POSIXlt(x, decreasing = FALSE, na.last = NA, ...) ",
	"source" : "source(file, local = FALSE, echo = verbose, print.eval = echo, ",
	"split" : "split(x, f, drop = FALSE, ...) ",
	"split.data.frame" : "split.data.frame(x, f, drop = FALSE, ...) ",
	"split.Date" : "split.Date(x, f, drop = FALSE, ...) ",
	"split.default" : "split.default(x, f, drop = FALSE, sep = \".\", ...) ",
	"split.POSIXct" : "split.POSIXct(x, f, drop = FALSE, ...) ",
	"sprintf" : "sprintf(fmt, ...) ",
	"sqrt" : "sqrt(x) ",
	"sQuote" : "sQuote(x) ",
	"srcfile" : "srcfile(filename, encoding = getOption(\"encoding\"), Enc = \"unknown\") ",
	"srcfilealias" : "srcfilealias(filename, srcfile) ",
	"srcfilecopy" : "srcfilecopy(filename, lines, timestamp = Sys.time(), isFile = FALSE) ",
	"srcref" : "srcref(srcfile, lloc) ",
	"standardGeneric" : "standardGeneric(f, fdef) ",
	"stderr" : "stderr() ",
	"stdin" : "stdin() ",
	"stdout" : "stdout() ",
	"stop" : "stop(..., call. = TRUE, domain = NULL) ",
	"stopifnot" : "stopifnot(...) ",
	"storage.mode" : "storage.mode(x) ",
	"strftime" : "strftime(x, format = \"\", tz = \"\", usetz = FALSE, ...) ",
	"strptime" : "strptime(x, format, tz = \"\") ",
	"strsplit" : "strsplit(x, split, fixed = FALSE, perl = FALSE, useBytes = FALSE) ",
	"strtoi" : "strtoi(x, base = 0L) ",
	"strtrim" : "strtrim(x, width) ",
	"structure" : "structure(.Data, ...) ",
	"strwrap" : "strwrap(x, width = 0.9 * getOption(\"width\"), indent = 0, exdent = 0, ",
	"subset" : "subset(x, ...) ",
	"subset.data.frame" : "subset.data.frame(x, subset, select, drop = FALSE, ...) ",
	"subset.default" : "subset.default(x, subset, ...) ",
	"subset.matrix" : "subset.matrix(x, subset, select, drop = FALSE, ...) ",
	"substitute" : "substitute(expr, env) ",
	"substr" : "substr(x, start, stop) ",
	"substring" : "substring(text, first, last = 1000000L) ",
	"summary" : "summary(object, ...) ",
	"summary.connection" : "summary.connection(object, ...) ",
	"summary.data.frame" : "summary.data.frame(object, maxsum = 7L, digits = max(3L, getOption(\"digits\") - ",
	"Summary.data.frame" : "Summary.data.frame(..., na.rm) ",
	"summary.Date" : "summary.Date(object, digits = 12L, ...) ",
	"Summary.Date" : "Summary.Date(..., na.rm) ",
	"summary.default" : "summary.default(object, ..., digits = max(3L, getOption(\"digits\") - ",
	"Summary.difftime" : "Summary.difftime(..., na.rm) ",
	"summary.factor" : "summary.factor(object, maxsum = 100, ...) ",
	"Summary.factor" : "Summary.factor(..., na.rm) ",
	"summary.matrix" : "summary.matrix(object, ...) ",
	"Summary.numeric_version" : "Summary.numeric_version(..., na.rm) ",
	"Summary.ordered" : "Summary.ordered(..., na.rm) ",
	"summary.POSIXct" : "summary.POSIXct(object, digits = 15L, ...) ",
	"Summary.POSIXct" : "Summary.POSIXct(..., na.rm) ",
	"summary.POSIXlt" : "summary.POSIXlt(object, digits = 15, ...) ",
	"Summary.POSIXlt" : "Summary.POSIXlt(..., na.rm) ",
	"summary.proc_time" : "summary.proc_time(object, ...) ",
	"summary.srcfile" : "summary.srcfile(object, ...) ",
	"summary.srcref" : "summary.srcref(object, useSource = FALSE, ...) ",
	"summary.table" : "summary.table(object, ...) ",
	"suppressMessages" : "suppressMessages(expr) ",
	"suppressPackageStartupMessages" : "suppressPackageStartupMessages(expr) ",
	"suppressWarnings" : "suppressWarnings(expr) ",
	"sweep" : "sweep(x, MARGIN, STATS, FUN = \"-\", check.margin = TRUE, ...) ",
	"switch" : "switch(EXPR, ...) ",
	"sys.call" : "sys.call(which = 0L) ",
	"sys.calls" : "sys.calls() ",
	"Sys.chmod" : "Sys.chmod(paths, mode = \"0777\", use_umask = TRUE) ",
	"Sys.Date" : "Sys.Date() ",
	"sys.frame" : "sys.frame(which = 0L) ",
	"sys.frames" : "sys.frames() ",
	"sys.function" : "sys.function(which = 0L) ",
	"Sys.getenv" : "Sys.getenv(x = NULL, unset = \"\", names = NA) ",
	"Sys.getlocale" : "Sys.getlocale(category = \"LC_ALL\") ",
	"Sys.getpid" : "Sys.getpid() ",
	"Sys.glob" : "Sys.glob(paths, dirmark = FALSE) ",
	"Sys.info" : "Sys.info() ",
	"sys.load.image" : "sys.load.image(name, quiet) ",
	"Sys.localeconv" : "Sys.localeconv() ",
	"sys.nframe" : "sys.nframe() ",
	"sys.on.exit" : "sys.on.exit() ",
	"sys.parent" : "sys.parent(n = 1L) ",
	"sys.parents" : "sys.parents() ",
	"Sys.readlink" : "Sys.readlink(paths) ",
	"sys.save.image" : "sys.save.image(name) ",
	"Sys.setenv" : "Sys.setenv(...) ",
	"Sys.setFileTime" : "Sys.setFileTime(path, time) ",
	"Sys.setlocale" : "Sys.setlocale(category = \"LC_ALL\", locale = \"\") ",
	"Sys.sleep" : "Sys.sleep(time) ",
	"sys.source" : "sys.source(file, envir = baseenv(), chdir = FALSE, keep.source = getOption(\"keep.source.pkgs\")) ",
	"sys.status" : "sys.status() ",
	"Sys.time" : "Sys.time() ",
	"Sys.timezone" : "Sys.timezone(location = TRUE) ",
	"Sys.umask" : "Sys.umask(mode = NA) ",
	"Sys.unsetenv" : "Sys.unsetenv(x) ",
	"Sys.which" : "Sys.which(names) ",
	"system" : "system(command, intern = FALSE, ignore.stdout = FALSE, ignore.stderr = FALSE, ",
	"system.file" : "system.file(..., package = \"base\", lib.loc = NULL, mustWork = FALSE) ",
	"system.time" : "system.time(expr, gcFirst = TRUE) ",
	"t.data.frame" : "t.data.frame(x) ",
	"t.default" : "t.default(x) ",
	"table" : "table(..., exclude = if (useNA == \"no\") c(NA, NaN), useNA = c(\"no\", ",
	"tabulate" : "tabulate(bin, nbins = max(1L, bin, na.rm = TRUE)) ",
	"tanh" : "tanh(x) ",
	"tanpi" : "tanpi(x) ",
	"tapply" : "tapply(X, INDEX, FUN = NULL, ..., simplify = TRUE) ",
	"taskCallbackManager" : "taskCallbackManager(handlers = list(), registered = FALSE, verbose = FALSE) ",
	"tcrossprod" : "tcrossprod(x, y = NULL) ",
	"tempdir" : "tempdir() ",
	"tempfile" : "tempfile(pattern = \"file\", tmpdir = tempdir(), fileext = \"\") ",
	"testPlatformEquivalence" : "testPlatformEquivalence(built, run) ",
	"textConnection" : "textConnection(object, open = \"r\", local = FALSE, encoding = c(\"\", ",
	"textConnectionValue" : "textConnectionValue(con) ",
	"tolower" : "tolower(x) ",
	"topenv" : "topenv(envir = parent.frame(), matchThisEnv = getOption(\"topLevelEnvironment\")) ",
	"toString" : "toString(x, ...) ",
	"toString.default" : "toString.default(x, width = NULL, ...) ",
	"toupper" : "toupper(x) ",
	"trace" : "trace(what, tracer, exit, at, print, signature, where = topenv(parent.frame()), ",
	"traceback" : "traceback(x = NULL, max.lines = getOption(\"deparse.max.lines\")) ",
	"tracemem" : "tracemem(x) ",
	"tracingState" : "tracingState(on = NULL) ",
	"transform" : "transform(`_data`, ...) ",
	"transform.data.frame" : "transform.data.frame(`_data`, ...) ",
	"transform.default" : "transform.default(`_data`, ...) ",
	"trigamma" : "trigamma(x) ",
	"trunc" : "trunc(x, ...) ",
	"trunc.Date" : "trunc.Date(x, ...) ",
	"trunc.POSIXt" : "trunc.POSIXt(x, units = c(\"secs\", \"mins\", \"hours\", \"days\"), ...) ",
	"truncate" : "truncate(con, ...) ",
	"truncate.connection" : "truncate.connection(con, ...) ",
	"tryCatch" : "tryCatch(expr, ..., finally) ",
	"typeof" : "typeof(x) ",
	"unclass" : "unclass(x) ",
	"undebug" : "undebug(fun) ",
	"union" : "union(x, y) ",
	"unique" : "unique(x, incomparables = FALSE, ...) ",
	"unique.array" : "unique.array(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE, ",
	"unique.data.frame" : "unique.data.frame(x, incomparables = FALSE, fromLast = FALSE, ...) ",
	"unique.default" : "unique.default(x, incomparables = FALSE, fromLast = FALSE, nmax = NA, ",
	"unique.matrix" : "unique.matrix(x, incomparables = FALSE, MARGIN = 1, fromLast = FALSE, ",
	"unique.numeric_version" : "unique.numeric_version(x, incomparables = FALSE, ...) ",
	"unique.POSIXlt" : "unique.POSIXlt(x, incomparables = FALSE, ...) ",
	"unique.warnings" : "unique.warnings(x, incomparables = FALSE, ...) ",
	"units" : "units(x) ",
	"units.difftime" : "units.difftime(x) ",
	"unix.time" : "unix.time(expr, gcFirst = TRUE) ",
	"unlink" : "unlink(x, recursive = FALSE, force = FALSE) ",
	"unlist" : "unlist(x, recursive = TRUE, use.names = TRUE) ",
	"unloadNamespace" : "unloadNamespace(ns) ",
	"unlockBinding" : "unlockBinding(sym, env) ",
	"unname" : "unname(obj, force = FALSE) ",
	"unserialize" : "unserialize(connection, refhook = NULL) ",
	"unsplit" : "unsplit(value, f, drop = FALSE) ",
	"untrace" : "untrace(what, signature = NULL, where = topenv(parent.frame())) ",
	"untracemem" : "untracemem(x) ",
	"upper.tri" : "upper.tri(x, diag = FALSE) ",
	"UseMethod" : "UseMethod(generic, object) ",
	"vapply" : "vapply(X, FUN, FUN.VALUE, ..., USE.NAMES = TRUE) ",
	"vector" : "vector(mode = \"logical\", length = 0L) ",
	"Vectorize" : "Vectorize(FUN, vectorize.args = arg.names, SIMPLIFY = TRUE, USE.NAMES = TRUE) ",
	"warning" : "warning(..., call. = TRUE, immediate. = FALSE, noBreaks. = FALSE, ",
	"warnings" : "warnings(...) ",
	"weekdays" : "weekdays(x, abbreviate) ",
	"weekdays.Date" : "weekdays.Date(x, abbreviate = FALSE) ",
	"weekdays.POSIXt" : "weekdays.POSIXt(x, abbreviate = FALSE) ",
	"which" : "which(x, arr.ind = FALSE, useNames = TRUE) ",
	"which.max" : "which.max(x) ",
	"which.min" : "which.min(x) ",
	"with" : "with(data, expr, ...) ",
	"with.default" : "with.default(data, expr, ...) ",
	"withCallingHandlers" : "withCallingHandlers(expr, ...) ",
	"within" : "within(data, expr, ...) ",
	"within.data.frame" : "within.data.frame(data, expr, ...) ",
	"within.list" : "within.list(data, expr, ...) ",
	"withRestarts" : "withRestarts(expr, ...) ",
	"withVisible" : "withVisible(x) ",
	"write" : "write(x, file = \"data\", ncolumns = if (is.character(x)) 1 else 5, ",
	"write.dcf" : "write.dcf(x, file = \"\", append = FALSE, indent = 0.1 * getOption(\"width\"), ",
	"writeBin" : "writeBin(object, con, size = NA_integer_, endian = .Platform$endian, ",
	"writeChar" : "writeChar(object, con, nchars = nchar(object, type = \"chars\"), ",
	"writeLines" : "writeLines(text, con = stdout(), sep = \"\\n\", useBytes = FALSE) ",
	"xor.hexmode" : "xor.hexmode(a, b) ",
	"xor.octmode" : "xor.octmode(a, b) ",
	"xpdrows.data.frame" : "xpdrows.data.frame(x, old.rows, new.rows) ",
	"xtfrm" : "xtfrm(x) ",
	"xtfrm.AsIs" : "xtfrm.AsIs(x) ",
	"xtfrm.Date" : "xtfrm.Date(x) ",
	"xtfrm.default" : "xtfrm.default(x) ",
	"xtfrm.difftime" : "xtfrm.difftime(x) ",
	"xtfrm.factor" : "xtfrm.factor(x) ",
	"xtfrm.numeric_version" : "xtfrm.numeric_version(x) ",
	"xtfrm.POSIXct" : "xtfrm.POSIXct(x) ",
	"xtfrm.POSIXlt" : "xtfrm.POSIXlt(x) ",
	"xtfrm.Surv" : "xtfrm.Surv(x) ",
	"xzfile" : "xzfile(description, open = \"\", encoding = getOption(\"encoding\"), ",
	"zapsmall" : "zapsmall(x, digits = getOption(\"digits\")) ",
	"add.scope" : "add.scope(terms1, terms2) ",
	"addmargins" : "addmargins(A, margin = seq_along(dim(A)), FUN = sum, quiet = FALSE) ",
	"aggregate" : "aggregate(x, ...) ",
	"aggregate.data.frame" : "aggregate.data.frame(x, by, FUN, ..., simplify = TRUE) ",
	"aggregate.ts" : "aggregate.ts(x, nfrequency = 1, FUN = sum, ndeltat = 1, ts.eps = getOption(\"ts.eps\"), ",
	"alias" : "alias(object, ...) ",
	"anova" : "anova(object, ...) ",
	"ansari.test" : "ansari.test(x, ...) ",
	"approx" : "approx(x, y = NULL, xout, method = \"linear\", n = 50, yleft, ",
	"approxfun" : "approxfun(x, y = NULL, method = \"linear\", yleft, yright, rule = 1, ",
	"ar.burg" : "ar.burg(x, ...) ",
	"ar.mle" : "ar.mle(x, aic = TRUE, order.max = NULL, na.action = na.fail, ",
	"ar.ols" : "ar.ols(x, aic = TRUE, order.max = NULL, na.action = na.fail, ",
	"ar.yw" : "ar.yw(x, ...) ",
	"arima" : "arima(x, order = c(0L, 0L, 0L), seasonal = list(order = c(0L, ",
	"arima.sim" : "arima.sim(model, n, rand.gen = rnorm, innov = rand.gen(n, ...), ",
	"ARMAacf" : "ARMAacf(ar = numeric(), ma = numeric(), lag.max = r, pacf = FALSE) ",
	"ARMAtoMA" : "ARMAtoMA(ar = numeric(), ma = numeric(), lag.max) ",
	"as.dendrogram" : "as.dendrogram(object, ...) ",
	"as.dist" : "as.dist(m, diag = FALSE, upper = FALSE) ",
	"as.formula" : "as.formula(object, env = parent.frame()) ",
	"as.hclust" : "as.hclust(x, ...) ",
	"as.stepfun" : "as.stepfun(x, ...) ",
	"as.ts" : "as.ts(x, ...) ",
	"asOneSidedFormula" : "asOneSidedFormula(object) ",
	"bandwidth.kernel" : "bandwidth.kernel(k) ",
	"bartlett.test" : "bartlett.test(x, ...) ",
	"binom.test" : "binom.test(x, n, p = 0.5, alternative = c(\"two.sided\", \"less\", ",
	"binomial" : "binomial(link = \"logit\") ",
	"biplot" : "biplot(x, ...) ",
	"Box.test" : "Box.test(x, lag = 1, type = c(\"Box-Pierce\", \"Ljung-Box\"), fitdf = 0) ",
	"bw.bcv" : "bw.bcv(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, tol = 0.1 * ",
	"bw.nrd" : "bw.nrd(x) ",
	"bw.SJ" : "bw.SJ(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, method = c(\"ste\", ",
	"bw.ucv" : "bw.ucv(x, nb = 1000L, lower = 0.1 * hmax, upper = hmax, tol = 0.1 * ",
	"cancor" : "cancor(x, y, xcenter = TRUE, ycenter = TRUE) ",
	"case.names" : "case.names(object, ...) ",
	"chisq.test" : "chisq.test(x, y = NULL, correct = TRUE, p = rep(1/length(x), length(x)), ",
	"cmdscale" : "cmdscale(d, k = 2, eig = FALSE, add = FALSE, x.ret = FALSE) ",
	"coef" : "coef(object, ...) ",
	"coefficients" : "coefficients(object, ...) ",
	"complete.cases" : "complete.cases(...) ",
	"confint" : "confint(object, parm, level = 0.95, ...) ",
	"confint.default" : "confint.default(object, parm, level = 0.95, ...) ",
	"confint.lm" : "confint.lm(object, parm, level = 0.95, ...) ",
	"constrOptim" : "constrOptim(theta, f, grad, ui, ci, mu = 1e-04, control = list(), ",
	"contr.helmert" : "contr.helmert(n, contrasts = TRUE, sparse = FALSE) ",
	"contr.poly" : "contr.poly(n, scores = 1:n, contrasts = TRUE, sparse = FALSE) ",
	"contr.SAS" : "contr.SAS(n, contrasts = TRUE, sparse = FALSE) ",
	"contr.sum" : "contr.sum(n, contrasts = TRUE, sparse = FALSE) ",
	"contr.treatment" : "contr.treatment(n, base = 1, contrasts = TRUE, sparse = FALSE) ",
	"contrasts" : "contrasts(x, contrasts = TRUE, sparse = FALSE) ",
	"convolve" : "convolve(x, y, conj = TRUE, type = c(\"circular\", \"open\", \"filter\")) ",
	"cooks.distance" : "cooks.distance(model, ...) ",
	"cophenetic" : "cophenetic(x) ",
	"cor.test" : "cor.test(x, ...) ",
	"cov.wt" : "cov.wt(x, wt = rep(1/nrow(x), nrow(x)), cor = FALSE, center = TRUE, ",
	"covratio" : "covratio(model, infl = lm.influence(model, do.coef = FALSE), ",
	"cpgram" : "cpgram(ts, taper = 0.1, main = paste(\"Series: \", deparse(substitute(ts))), ",
	"cutree" : "cutree(tree, k = NULL, h = NULL) ",
	"cycle" : "cycle(x, ...) ",
	"dbeta" : "dbeta(x, shape1, shape2, ncp = 0, log = FALSE) ",
	"dbinom" : "dbinom(x, size, prob, log = FALSE) ",
	"dcauchy" : "dcauchy(x, location = 0, scale = 1, log = FALSE) ",
	"dchisq" : "dchisq(x, df, ncp = 0, log = FALSE) ",
	"decompose" : "decompose(x, type = c(\"additive\", \"multiplicative\"), filter = NULL) ",
	"delete.response" : "delete.response(termobj) ",
	"deltat" : "deltat(x, ...) ",
	"dendrapply" : "dendrapply(X, FUN, ...) ",
	"density" : "density(x, ...) ",
	"density.default" : "density.default(x, bw = \"nrd0\", adjust = 1, kernel = c(\"gaussian\", ",
	"deriv" : "deriv(expr, ...) ",
	"deviance" : "deviance(object, ...) ",
	"dexp" : "dexp(x, rate = 1, log = FALSE) ",
	"df.kernel" : "df.kernel(k) ",
	"df.residual" : "df.residual(object, ...) ",
	"dfbeta" : "dfbeta(model, ...) ",
	"dfbetas" : "dfbetas(model, ...) ",
	"dffits" : "dffits(model, infl = lm.influence(model, do.coef = FALSE), ",
	"dgamma" : "dgamma(x, shape, rate = 1, scale = 1/rate, log = FALSE) ",
	"dgeom" : "dgeom(x, prob, log = FALSE) ",
	"dhyper" : "dhyper(x, m, n, k, log = FALSE) ",
	"diffinv" : "diffinv(x, ...) ",
	"dist" : "dist(x, method = \"euclidean\", diag = FALSE, upper = FALSE, ",
	"dlnorm" : "dlnorm(x, meanlog = 0, sdlog = 1, log = FALSE) ",
	"dlogis" : "dlogis(x, location = 0, scale = 1, log = FALSE) ",
	"dmultinom" : "dmultinom(x, size = NULL, prob, log = FALSE) ",
	"dnbinom" : "dnbinom(x, size, prob, mu, log = FALSE) ",
	"dnorm" : "dnorm(x, mean = 0, sd = 1, log = FALSE) ",
	"dpois" : "dpois(x, lambda, log = FALSE) ",
	"drop.scope" : "drop.scope(terms1, terms2) ",
	"drop.terms" : "drop.terms(termobj, dropx = NULL, keep.response = FALSE) ",
	"dsignrank" : "dsignrank(x, n, log = FALSE) ",
	"dummy.coef" : "dummy.coef(object, ...) ",
	"dummy.coef.lm" : "dummy.coef.lm(object, use.na = FALSE, ...) ",
	"dunif" : "dunif(x, min = 0, max = 1, log = FALSE) ",
	"dweibull" : "dweibull(x, shape, scale = 1, log = FALSE) ",
	"dwilcox" : "dwilcox(x, m, n, log = FALSE) ",
	"ecdf" : "ecdf(x) ",
	"eff.aovlist" : "eff.aovlist(aovlist) ",
	"effects" : "effects(object, ...) ",
	"embed" : "embed(x, dimension = 1) ",
	"estVar" : "estVar(object, ...) ",
	"expand.model.frame" : "expand.model.frame(model, extras, envir = environment(formula(model)), ",
	"extractAIC" : "extractAIC(fit, scale, k = 2, ...) ",
	"factanal" : "factanal(x, factors, data = NULL, covmat = NULL, n.obs = NA, ",
	"factor.scope" : "factor.scope(factor, scope) ",
	"family" : "family(object, ...) ",
	"filter" : "filter(x, filter, method = c(\"convolution\", \"recursive\"), ",
	"fisher.test" : "fisher.test(x, y = NULL, workspace = 2e+05, hybrid = FALSE, control = list(), ",
	"fitted" : "fitted(object, ...) ",
	"fitted.values" : "fitted.values(object, ...) ",
	"fivenum" : "fivenum(x, na.rm = TRUE) ",
	"fligner.test" : "fligner.test(x, ...) ",
	"formula" : "formula(x, ...) ",
	"frequency" : "frequency(x, ...) ",
	"friedman.test" : "friedman.test(y, ...) ",
	"ftable" : "ftable(x, ...) ",
	"Gamma" : "Gamma(link = \"inverse\") ",
	"gaussian" : "gaussian(link = \"identity\") ",
	"get_all_vars" : "get_all_vars(formula, data = NULL, ...) ",
	"getCall" : "getCall(x, ...) ",
	"getInitial" : "getInitial(object, data, ...) ",
	"glm.control" : "glm.control(epsilon = 1e-08, maxit = 25, trace = FALSE) ",
	"glm.fit" : "glm.fit(x, y, weights = rep(1, nobs), start = NULL, etastart = NULL, ",
	"hasTsp" : "hasTsp(x) ",
	"hatvalues" : "hatvalues(model, ...) ",
	"hclust" : "hclust(d, method = \"complete\", members = NULL) ",
	"heatmap" : "heatmap(x, Rowv = NULL, Colv = if (symm) \"Rowv\" else NULL, ",
	"HoltWinters" : "HoltWinters(x, alpha = NULL, beta = NULL, gamma = NULL, seasonal = c(\"additive\", ",
	"influence" : "influence(model, ...) ",
	"influence.measures" : "influence.measures(model) ",
	"integrate" : "integrate(f, lower, upper, ..., subdivisions = 100L, rel.tol = .Machine$double.eps^0.25, ",
	"interaction.plot" : "interaction.plot(x.factor, trace.factor, response, fun = mean, type = c(\"l\", ",
	"inverse.gaussian" : "inverse.gaussian(link = \"1/mu^2\") ",
	"is.empty.model" : "is.empty.model(x) ",
	"is.leaf" : "is.leaf(object) ",
	"is.mts" : "is.mts(x) ",
	"is.stepfun" : "is.stepfun(x) ",
	"is.ts" : "is.ts(x) ",
	"is.tskernel" : "is.tskernel(k) ",
	"isoreg" : "isoreg(x, y = NULL) ",
	"KalmanForecast" : "KalmanForecast(n.ahead = 10L, mod, update = FALSE) ",
	"KalmanLike" : "KalmanLike(y, mod, nit = 0L, update = FALSE) ",
	"KalmanRun" : "KalmanRun(y, mod, nit = 0L, update = FALSE) ",
	"KalmanSmooth" : "KalmanSmooth(y, mod, nit = 0L) ",
	"kernapply" : "kernapply(x, ...) ",
	"kernel" : "kernel(coef, m = 2, r, name = \"unknown\") ",
	"kmeans" : "kmeans(x, centers, iter.max = 10, nstart = 1, algorithm = c(\"Hartigan-Wong\", ",
	"knots" : "knots(Fn, ...) ",
	"kruskal.test" : "kruskal.test(x, ...) ",
	"ks.test" : "ks.test(x, y, ..., alternative = c(\"two.sided\", \"less\", \"greater\"), ",
	"ksmooth" : "ksmooth(x, y, kernel = c(\"box\", \"normal\"), bandwidth = 0.5, ",
	"lag.plot" : "lag.plot(x, lags = 1, layout = NULL, set.lags = 1L:lags, main = NULL, ",
	"line" : "line(x, y = NULL) ",
	"lm.fit" : "lm.fit(x, y, offset = NULL, method = \"qr\", tol = 1e-07, singular.ok = TRUE, ",
	"lm.influence" : "lm.influence(model, do.coef = TRUE) ",
	"lm.wfit" : "lm.wfit(x, y, w, offset = NULL, method = \"qr\", tol = 1e-07, ",
	"loadings" : "loadings(x, ...) ",
	"loess" : "loess(formula, data, weights, subset, na.action, model = FALSE, ",
	"loess.control" : "loess.control(surface = c(\"interpolate\", \"direct\"), statistics = c(\"approximate\", ",
	"loess.smooth" : "loess.smooth(x, y, span = 2/3, degree = 1, family = c(\"symmetric\", ",
	"logLik" : "logLik(object, ...) ",
	"loglin" : "loglin(table, margin, start = rep(1, length(table)), fit = FALSE, ",
	"lowess" : "lowess(x, y = NULL, f = 2/3, iter = 3L, delta = 0.01 * diff(range(x))) ",
	"ls.diag" : "ls.diag(ls.out) ",
	"ls.print" : "ls.print(ls.out, digits = 4L, print.it = TRUE) ",
	"lsfit" : "lsfit(x, y, wt = NULL, intercept = TRUE, tolerance = 1e-07, ",
	"mahalanobis" : "mahalanobis(x, center, cov, inverted = FALSE, ...) ",
	"make.link" : "make.link(link) ",
	"makeARIMA" : "makeARIMA(phi, theta, Delta, kappa = 1e+06, SSinit = c(\"Gardner1980\", ",
	"makepredictcall" : "makepredictcall(var, call) ",
	"manova" : "manova(...) ",
	"mantelhaen.test" : "mantelhaen.test(x, y = NULL, z = NULL, alternative = c(\"two.sided\", ",
	"mauchly.test" : "mauchly.test(object, ...) ",
	"mcnemar.test" : "mcnemar.test(x, y = NULL, correct = TRUE) ",
	"median" : "median(x, na.rm = FALSE) ",
	"median.default" : "median.default(x, na.rm = FALSE) ",
	"medpolish" : "medpolish(x, eps = 0.01, maxiter = 10L, trace.iter = TRUE, na.rm = FALSE) ",
	"model.extract" : "model.extract(frame, component) ",
	"model.frame" : "model.frame(formula, ...) ",
	"model.frame.default" : "model.frame.default(formula, data = NULL, subset = NULL, na.action = na.fail, ",
	"model.matrix" : "model.matrix(object, ...) ",
	"model.matrix.default" : "model.matrix.default(object, data = environment(object), contrasts.arg = NULL, ",
	"model.matrix.lm" : "model.matrix.lm(object, ...) ",
	"model.offset" : "model.offset(x) ",
	"model.response" : "model.response(data, type = \"any\") ",
	"model.tables" : "model.tables(x, ...) ",
	"model.weights" : "model.weights(x) ",
	"monthplot" : "monthplot(x, ...) ",
	"mood.test" : "mood.test(x, ...) ",
	"mvfft" : "mvfft(z, inverse = FALSE) ",
	"na.action" : "na.action(object, ...) ",
	"na.contiguous" : "na.contiguous(object, ...) ",
	"na.exclude" : "na.exclude(object, ...) ",
	"na.fail" : "na.fail(object, ...) ",
	"na.omit" : "na.omit(object, ...) ",
	"na.pass" : "na.pass(object, ...) ",
	"napredict" : "napredict(omit, x, ...) ",
	"naprint" : "naprint(x, ...) ",
	"naresid" : "naresid(omit, x, ...) ",
	"nextn" : "nextn(n, factors = c(2, 3, 5)) ",
	"nlminb" : "nlminb(start, objective, gradient = NULL, hessian = NULL, ",
	"nls.control" : "nls.control(maxiter = 50, tol = 1e-05, minFactor = 1/1024, printEval = FALSE, ",
	"NLSstAsymptotic" : "NLSstAsymptotic(xy) ",
	"NLSstClosestX" : "NLSstClosestX(xy, yval) ",
	"NLSstLfAsymptote" : "NLSstLfAsymptote(xy) ",
	"NLSstRtAsymptote" : "NLSstRtAsymptote(xy) ",
	"nobs" : "nobs(object, ...) ",
	"numericDeriv" : "numericDeriv(expr, theta, rho = parent.frame(), dir = 1) ",
	"offset" : "offset(object) ",
	"oneway.test" : "oneway.test(formula, data, subset, na.action, var.equal = FALSE) ",
	"optim" : "optim(par, fn, gr = NULL, ..., method = c(\"Nelder-Mead\", ",
	"optimHess" : "optimHess(par, fn, gr = NULL, ..., control = list()) ",
	"optimise" : "optimise(f, interval, ..., lower = min(interval), upper = max(interval), ",
	"optimize" : "optimize(f, interval, ..., lower = min(interval), upper = max(interval), ",
	"order.dendrogram" : "order.dendrogram(x) ",
	"p.adjust" : "p.adjust(p, method = p.adjust.methods, n = length(p)) ",
	"pacf" : "pacf(x, lag.max, plot, na.action, ...) ",
	"pairwise.prop.test" : "pairwise.prop.test(x, n, p.adjust.method = p.adjust.methods, ...) ",
	"pairwise.t.test" : "pairwise.t.test(x, g, p.adjust.method = p.adjust.methods, pool.sd = !paired, ",
	"pairwise.table" : "pairwise.table(compare.levels, level.names, p.adjust.method) ",
	"pairwise.wilcox.test" : "pairwise.wilcox.test(x, g, p.adjust.method = p.adjust.methods, paired = FALSE, ",
	"pbeta" : "pbeta(q, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) ",
	"pbinom" : "pbinom(q, size, prob, lower.tail = TRUE, log.p = FALSE) ",
	"pbirthday" : "pbirthday(n, classes = 365, coincident = 2) ",
	"pcauchy" : "pcauchy(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ",
	"pchisq" : "pchisq(q, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) ",
	"pexp" : "pexp(q, rate = 1, lower.tail = TRUE, log.p = FALSE) ",
	"pgamma" : "pgamma(q, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, ",
	"pgeom" : "pgeom(q, prob, lower.tail = TRUE, log.p = FALSE) ",
	"phyper" : "phyper(q, m, n, k, lower.tail = TRUE, log.p = FALSE) ",
	"plclust" : "plclust(tree, hang = 0.1, unit = FALSE, level = FALSE, hmin = 0, ",
	"plnorm" : "plnorm(q, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) ",
	"plogis" : "plogis(q, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ",
	"plot.ecdf" : "plot.ecdf(x, ..., ylab = \"Fn(x)\", verticals = FALSE, col.01line = \"gray70\", ",
	"plot.spec.coherency" : "plot.spec.coherency(x, ci = 0.95, xlab = \"frequency\", ylab = \"squared coherency\", ",
	"plot.spec.phase" : "plot.spec.phase(x, ci = 0.95, xlab = \"frequency\", ylab = \"phase\", ylim = c(-pi, ",
	"plot.stepfun" : "plot.stepfun(x, xval, xlim, ylim = range(c(y, Fn.kn)), xlab = \"x\", ",
	"plot.ts" : "plot.ts(x, y = NULL, plot.type = c(\"multiple\", \"single\"), xy.labels, ",
	"pnbinom" : "pnbinom(q, size, prob, mu, lower.tail = TRUE, log.p = FALSE) ",
	"pnorm" : "pnorm(q, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) ",
	"poisson" : "poisson(link = \"log\") ",
	"poisson.test" : "poisson.test(x, T = 1, r = 1, alternative = c(\"two.sided\", \"less\", ",
	"poly" : "poly(x, ..., degree = 1, coefs = NULL, raw = FALSE) ",
	"polym" : "polym(..., degree = 1, raw = FALSE) ",
	"power" : "power(lambda = 1) ",
	"power.anova.test" : "power.anova.test(groups = NULL, n = NULL, between.var = NULL, within.var = NULL, ",
	"power.prop.test" : "power.prop.test(n = NULL, p1 = NULL, p2 = NULL, sig.level = 0.05, power = NULL, ",
	"power.t.test" : "power.t.test(n = NULL, delta = NULL, sd = 1, sig.level = 0.05, power = NULL, ",
	"PP.test" : "PP.test(x, lshort = TRUE) ",
	"ppoints" : "ppoints(n, a = ifelse(n <= 10, 3/8, 1/2)) ",
	"ppois" : "ppois(q, lambda, lower.tail = TRUE, log.p = FALSE) ",
	"prcomp" : "prcomp(x, ...) ",
	"predict" : "predict(object, ...) ",
	"predict.glm" : "predict.glm(object, newdata = NULL, type = c(\"link\", \"response\", ",
	"predict.lm" : "predict.lm(object, newdata, se.fit = FALSE, scale = NULL, df = Inf, ",
	"preplot" : "preplot(object, ...) ",
	"princomp" : "princomp(x, ...) ",
	"printCoefmat" : "printCoefmat(x, digits = max(3L, getOption(\"digits\") - 2L), signif.stars = getOption(\"show.signif.stars\"), ",
	"profile" : "profile(fitted, ...) ",
	"proj" : "proj(object, ...) ",
	"promax" : "promax(x, m = 4) ",
	"prop.test" : "prop.test(x, n, p = NULL, alternative = c(\"two.sided\", \"less\", ",
	"prop.trend.test" : "prop.trend.test(x, n, score = seq_along(x)) ",
	"psignrank" : "psignrank(q, n, lower.tail = TRUE, log.p = FALSE) ",
	"ptukey" : "ptukey(q, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE) ",
	"punif" : "punif(q, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) ",
	"pweibull" : "pweibull(q, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) ",
	"pwilcox" : "pwilcox(q, m, n, lower.tail = TRUE, log.p = FALSE) ",
	"qbeta" : "qbeta(p, shape1, shape2, ncp = 0, lower.tail = TRUE, log.p = FALSE) ",
	"qbinom" : "qbinom(p, size, prob, lower.tail = TRUE, log.p = FALSE) ",
	"qbirthday" : "qbirthday(prob = 0.5, classes = 365, coincident = 2) ",
	"qcauchy" : "qcauchy(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qchisq" : "qchisq(p, df, ncp = 0, lower.tail = TRUE, log.p = FALSE) ",
	"qexp" : "qexp(p, rate = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qgamma" : "qgamma(p, shape, rate = 1, scale = 1/rate, lower.tail = TRUE, ",
	"qgeom" : "qgeom(p, prob, lower.tail = TRUE, log.p = FALSE) ",
	"qhyper" : "qhyper(p, m, n, k, lower.tail = TRUE, log.p = FALSE) ",
	"qlnorm" : "qlnorm(p, meanlog = 0, sdlog = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qlogis" : "qlogis(p, location = 0, scale = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qnbinom" : "qnbinom(p, size, prob, mu, lower.tail = TRUE, log.p = FALSE) ",
	"qnorm" : "qnorm(p, mean = 0, sd = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qpois" : "qpois(p, lambda, lower.tail = TRUE, log.p = FALSE) ",
	"qqline" : "qqline(y, datax = FALSE, distribution = qnorm, probs = c(0.25, ",
	"qqnorm" : "qqnorm(y, ...) ",
	"qqplot" : "qqplot(x, y, plot.it = TRUE, xlab = deparse(substitute(x)), ",
	"qsignrank" : "qsignrank(p, n, lower.tail = TRUE, log.p = FALSE) ",
	"qtukey" : "qtukey(p, nmeans, df, nranges = 1, lower.tail = TRUE, log.p = FALSE) ",
	"quade.test" : "quade.test(y, ...) ",
	"quantile" : "quantile(x, ...) ",
	"quasi" : "quasi(link = \"identity\", variance = \"constant\") ",
	"quasibinomial" : "quasibinomial(link = \"logit\") ",
	"quasipoisson" : "quasipoisson(link = \"log\") ",
	"qunif" : "qunif(p, min = 0, max = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qweibull" : "qweibull(p, shape, scale = 1, lower.tail = TRUE, log.p = FALSE) ",
	"qwilcox" : "qwilcox(p, m, n, lower.tail = TRUE, log.p = FALSE) ",
	"rbeta" : "rbeta(n, shape1, shape2, ncp = 0) ",
	"rbinom" : "rbinom(n, size, prob) ",
	"rcauchy" : "rcauchy(n, location = 0, scale = 1) ",
	"rchisq" : "rchisq(n, df, ncp = 0) ",
	"read.ftable" : "read.ftable(file, sep = \"\", quote = \"\\\"\", row.var.names, col.vars, ",
	"rect.hclust" : "rect.hclust(tree, k = NULL, which = NULL, x = NULL, h = NULL, border = 2, ",
	"reformulate" : "reformulate(termlabels, response = NULL, intercept = TRUE) ",
	"relevel" : "relevel(x, ref, ...) ",
	"reorder" : "reorder(x, ...) ",
	"replications" : "replications(formula, data = NULL, na.action) ",
	"reshape" : "reshape(data, varying = NULL, v.names = NULL, timevar = \"time\", ",
	"resid" : "resid(object, ...) ",
	"residuals" : "residuals(object, ...) ",
	"residuals.glm" : "residuals.glm(object, type = c(\"deviance\", \"pearson\", \"working\", ",
	"residuals.lm" : "residuals.lm(object, type = c(\"working\", \"response\", \"deviance\", ",
	"rexp" : "rexp(n, rate = 1) ",
	"rgamma" : "rgamma(n, shape, rate = 1, scale = 1/rate) ",
	"rgeom" : "rgeom(n, prob) ",
	"rhyper" : "rhyper(nn, m, n, k) ",
	"rlnorm" : "rlnorm(n, meanlog = 0, sdlog = 1) ",
	"rlogis" : "rlogis(n, location = 0, scale = 1) ",
	"rmultinom" : "rmultinom(n, size, prob) ",
	"rnbinom" : "rnbinom(n, size, prob, mu) ",
	"rnorm" : "rnorm(n, mean = 0, sd = 1) ",
	"rpois" : "rpois(n, lambda) ",
	"rsignrank" : "rsignrank(nn, n) ",
	"rstandard" : "rstandard(model, ...) ",
	"rstudent" : "rstudent(model, ...) ",
	"runif" : "runif(n, min = 0, max = 1) ",
	"runmed" : "runmed(x, k, endrule = c(\"median\", \"keep\", \"constant\"), algorithm = NULL, ",
	"rweibull" : "rweibull(n, shape, scale = 1) ",
	"rwilcox" : "rwilcox(nn, m, n) ",
	"rWishart" : "rWishart(n, df, Sigma) ",
	"scatter.smooth" : "scatter.smooth(x, y = NULL, span = 2/3, degree = 1, family = c(\"symmetric\", ",
	"screeplot" : "screeplot(x, ...) ",
	"se.contrast" : "se.contrast(object, ...) ",
	"selfStart" : "selfStart(model, initial, parameters, template) ",
	"setNames" : "setNames(object = nm, nm) ",
	"shapiro.test" : "shapiro.test(x) ",
	"simulate" : "simulate(object, nsim = 1, seed = NULL, ...) ",
	"smooth" : "smooth(x, kind = c(\"3RS3R\", \"3RSS\", \"3RSR\", \"3R\", \"3\", \"S\"), ",
	"smooth.spline" : "smooth.spline(x, y = NULL, w = NULL, df, spar = NULL, cv = FALSE, ",
	"smoothEnds" : "smoothEnds(y, k = 3) ",
	"sortedXyData" : "sortedXyData(x, y, data) ",
	"spec.ar" : "spec.ar(x, n.freq, order = NULL, plot = TRUE, na.action = na.fail, ",
	"spec.pgram" : "spec.pgram(x, spans = NULL, kernel = NULL, taper = 0.1, pad = 0, ",
	"spec.taper" : "spec.taper(x, p = 0.1) ",
	"spectrum" : "spectrum(x, ..., method = c(\"pgram\", \"ar\")) ",
	"spline" : "spline(x, y = NULL, n = 3 * length(x), method = \"fmm\", xmin = min(x), ",
	"splinefun" : "splinefun(x, y = NULL, method = c(\"fmm\", \"periodic\", \"natural\", ",
	"splinefunH" : "splinefunH(x, y, m) ",
	"SSasymp" : "SSasymp(input, Asym, R0, lrc) ",
	"SSasympOff" : "SSasympOff(input, Asym, lrc, c0) ",
	"SSasympOrig" : "SSasympOrig(input, Asym, lrc) ",
	"SSbiexp" : "SSbiexp(input, A1, lrc1, A2, lrc2) ",
	"SSfol" : "SSfol(Dose, input, lKe, lKa, lCl) ",
	"SSfpl" : "SSfpl(input, A, B, xmid, scal) ",
	"SSgompertz" : "SSgompertz(x, Asym, b2, b3) ",
	"SSlogis" : "SSlogis(input, Asym, xmid, scal) ",
	"SSmicmen" : "SSmicmen(input, Vm, K) ",
	"SSweibull" : "SSweibull(x, Asym, Drop, lrc, pwr) ",
	"start" : "start(x, ...) ",
	"stat.anova" : "stat.anova(table, test = c(\"Rao\", \"LRT\", \"Chisq\", \"F\", \"Cp\"), ",
	"step" : "step(object, scope, scale = 0, direction = c(\"both\", \"backward\", ",
	"stepfun" : "stepfun(x, y, f = as.numeric(right), ties = \"ordered\", right = FALSE) ",
	"StructTS" : "StructTS(x, type = c(\"level\", \"trend\", \"BSM\"), init = NULL, ",
	"summary.aov" : "summary.aov(object, intercept = FALSE, split, expand.split = TRUE, ",
	"summary.glm" : "summary.glm(object, dispersion = NULL, correlation = FALSE, symbolic.cor = FALSE, ",
	"summary.lm" : "summary.lm(object, correlation = FALSE, symbolic.cor = FALSE, ",
	"summary.manova" : "summary.manova(object, test = c(\"Pillai\", \"Wilks\", \"Hotelling-Lawley\", ",
	"summary.stepfun" : "summary.stepfun(object, ...) ",
	"supsmu" : "supsmu(x, y, wt = rep(1, n), span = \"cv\", periodic = FALSE, ",
	"symnum" : "symnum(x, cutpoints = c(0.3, 0.6, 0.8, 0.9, 0.95), symbols = if (numeric.x) c(\" \", ",
	"t.test" : "t.test(x, ...) ",
	"termplot" : "termplot(model, data = NULL, envir = environment(formula(model)), ",
	"terms" : "terms(x, ...) ",
	"terms.formula" : "terms.formula(x, specials = NULL, abb = NULL, data = NULL, neg.out = TRUE, ",
	"time" : "time(x, ...) ",
	"toeplitz" : "toeplitz(x, ...) ",
	"ts.intersect" : "ts.intersect(..., dframe = FALSE) ",
	"ts.plot" : "ts.plot(..., gpars = list()) ",
	"ts.union" : "ts.union(..., dframe = FALSE) ",
	"tsdiag" : "tsdiag(object, gof.lag, ...) ",
	"tsSmooth" : "tsSmooth(object, ...) ",
	"TukeyHSD" : "TukeyHSD(x, which, ordered = FALSE, conf.level = 0.95, ...) ",
	"uniroot" : "uniroot(f, interval, ..., lower = min(interval), upper = max(interval), ",
	"update" : "update(object, ...) ",
	"update.default" : "update.default(object, formula., ..., evaluate = TRUE) ",
	"update.formula" : "update.formula(old, new, ...) ",
	"var.test" : "var.test(x, ...) ",
	"variable.names" : "variable.names(object, ...) ",
	"varimax" : "varimax(x, normalize = TRUE, eps = 1e-05) ",
	"vcov" : "vcov(object, ...) ",
	"weighted.mean" : "weighted.mean(x, w, ...) ",
	"weighted.residuals" : "weighted.residuals(obj, drop0 = TRUE) ",
	"weights" : "weights(object, ...) ",
	"wilcox.test" : "wilcox.test(x, ...) ",
	"window" : "window(x, ...) ",
	"write.ftable" : "write.ftable(x, file = \"\", quote = TRUE, append = FALSE, digits = getOption(\"digits\"), ",
	"xtabs" : "xtabs(formula = ~., data = parent.frame(), subset, sparse = FALSE, ",
	"addNextMethod" : "addNextMethod(method, f = \"<unknown>\", mlist, optional = FALSE, envir) ",
	"allGenerics" : "allGenerics(...) ",
	"allNames" : "allNames(x) ",
	"Arith" : "Arith(e1, e2) ",
	"asMethodDefinition" : "asMethodDefinition(def, signature = list(.anyClassName), sealed = FALSE, ",
	"assignClassDef" : "assignClassDef(Class, def, where = .GlobalEnv, force = FALSE) ",
	"assignMethodsMetaData" : "assignMethodsMetaData(f, value, fdef, where, deflt) ",
	"balanceMethodsList" : "balanceMethodsList(mlist, args, check = TRUE) ",
	"cacheGenericsMetaData" : "cacheGenericsMetaData(f, fdef, attach = TRUE, where = topenv(parent.frame()), ",
	"cacheMetaData" : "cacheMetaData(where, attach = TRUE, searchWhere = as.environment(where), ",
	"cacheMethod" : "cacheMethod(f, sig, def, args = names(sig), fdef, inherited = FALSE) ",
	"callGeneric" : "callGeneric(...) ",
	"callNextMethod" : "callNextMethod(...) ",
	"canCoerce" : "canCoerce(object, Class) ",
	"checkAtAssignment" : "checkAtAssignment(cl, name, valueClass) ",
	"checkSlotAssignment" : "checkSlotAssignment(obj, name, value) ",
	"classesToAM" : "classesToAM(classes, includeSubclasses = FALSE, abbreviate = 2) ",
	"classLabel" : "classLabel(Class) ",
	"classMetaName" : "classMetaName(name) ",
	"className" : "className(class, package) ",
	"coerce" : "coerce(from, to, strict = TRUE) ",
	"Compare" : "Compare(e1, e2) ",
	"completeClassDefinition" : "completeClassDefinition(Class, ClassDef = getClassDef(Class), where, doExtends = TRUE) ",
	"completeExtends" : "completeExtends(ClassDef, class2, extensionDef, where) ",
	"completeSubclasses" : "completeSubclasses(classDef, class2, extensionDef, where, classDef2 = getClassDef(class2, ",
	"Complex" : "Complex(z) ",
	"conformMethod" : "conformMethod(signature, mnames, fnames, f = \"<unspecified>\", fdef, ",
	"defaultDumpName" : "defaultDumpName(generic, signature) ",
	"defaultPrototype" : "defaultPrototype() ",
	"doPrimitiveMethod" : "doPrimitiveMethod(name, def, call = sys.call(sys.parent()), ev = sys.frame(sys.parent(2))) ",
	"dumpMethod" : "dumpMethod(f, signature = character(), file = defaultDumpName(f, ",
	"dumpMethods" : "dumpMethods(f, file = \"\", signature = NULL, methods = findMethods(f, ",
	"elNamed" : "elNamed(x, name, mustFind = FALSE) ",
	"empty.dump" : "empty.dump() ",
	"emptyMethodsList" : "emptyMethodsList(mlist, thisClass = \"ANY\", sublist = list()) ",
	"evalOnLoad" : "evalOnLoad(expr, where = topenv(parent.frame()), aname = \"\") ",
	"evalqOnLoad" : "evalqOnLoad(expr, where = topenv(parent.frame()), aname = \"\") ",
	"evalSource" : "evalSource(source, package = \"\", lock = TRUE, cache = FALSE) ",
	"existsFunction" : "existsFunction(f, generic = TRUE, where = topenv(parent.frame())) ",
	"existsMethod" : "existsMethod(f, signature = character(), where = topenv(parent.frame())) ",
	"extends" : "extends(class1, class2, maybe = TRUE, fullInfo = FALSE) ",
	"finalDefaultMethod" : "finalDefaultMethod(method) ",
	"findClass" : "findClass(Class, where = topenv(parent.frame()), unique = \"\") ",
	"findFunction" : "findFunction(f, generic = TRUE, where = topenv(parent.frame())) ",
	"findMethod" : "findMethod(f, signature, where = topenv(parent.frame())) ",
	"findMethods" : "findMethods(f, where, classes = character(), inherited = FALSE, ",
	"findMethodSignatures" : "findMethodSignatures(..., target = TRUE, methods = findMethods(...)) ",
	"findUnique" : "findUnique(what, message, where = topenv(parent.frame())) ",
	"formalArgs" : "formalArgs(def) ",
	"functionBody" : "functionBody(fun = sys.function(sys.parent())) ",
	"generic.skeleton" : "generic.skeleton(name, fdef, fdefault) ",
	"getAccess" : "getAccess(ClassDef) ",
	"getAllMethods" : "getAllMethods(f, fdef, where = topenv(parent.frame())) ",
	"getAllSuperClasses" : "getAllSuperClasses(ClassDef, simpleOnly = TRUE) ",
	"getClass" : "getClass(Class, .Force = FALSE, where = .classEnv(Class, topenv(parent.frame()), ",
	"getClassDef" : "getClassDef(Class, where = topenv(parent.frame()), package = packageSlot(Class), ",
	"getClasses" : "getClasses(where = .externalCallerEnv(), inherits = missing(where)) ",
	"getClassName" : "getClassName(ClassDef) ",
	"getClassPackage" : "getClassPackage(ClassDef) ",
	"getDataPart" : "getDataPart(object) ",
	"getExtends" : "getExtends(ClassDef) ",
	"getFunction" : "getFunction(name, generic = TRUE, mustFind = TRUE, where = topenv(parent.frame())) ",
	"getGeneric" : "getGeneric(f, mustFind = FALSE, where, package = \"\") ",
	"getGenerics" : "getGenerics(where, searchForm = FALSE) ",
	"getGroup" : "getGroup(fdef, recursive = FALSE, where = topenv(parent.frame())) ",
	"getGroupMembers" : "getGroupMembers(group, recursive = FALSE, character = TRUE) ",
	"getLoadActions" : "getLoadActions(where = topenv(parent.frame())) ",
	"getMethod" : "getMethod(f, signature = character(), where = topenv(parent.frame()), ",
	"getMethods" : "getMethods(f, where = topenv(parent.frame()), table = FALSE) ",
	"getMethodsForDispatch" : "getMethodsForDispatch(fdef, inherited = FALSE) ",
	"getMethodsMetaData" : "getMethodsMetaData(f, where = topenv(parent.frame())) ",
	"getPackageName" : "getPackageName(where = topenv(parent.frame()), create = TRUE) ",
	"getProperties" : "getProperties(ClassDef) ",
	"getPrototype" : "getPrototype(ClassDef) ",
	"getRefClass" : "getRefClass(Class, where = topenv(parent.frame())) ",
	"getSlots" : "getSlots(x) ",
	"getSubclasses" : "getSubclasses(ClassDef) ",
	"getValidity" : "getValidity(ClassDef) ",
	"getVirtual" : "getVirtual(ClassDef) ",
	"hasArg" : "hasArg(name) ",
	"hasLoadAction" : "hasLoadAction(aname, where = topenv(parent.frame())) ",
	"hasMethod" : "hasMethod(f, signature = character(), where = .genEnv(f, topenv(parent.frame()))) ",
	"hasMethods" : "hasMethods(f, where, package = \"\") ",
	"implicitGeneric" : "implicitGeneric(name, where = topenv(parent.frame()), generic = getGeneric(name, ",
	"inheritedSlotNames" : "inheritedSlotNames(Class, where = topenv(parent.frame())) ",
	"initFieldArgs" : "initFieldArgs(.Object, classDef, selfEnv, ...) ",
	"initialize" : "initialize(.Object, ...) ",
	"initRefFields" : "initRefFields(.Object, classDef, selfEnv, args) ",
	"insertClassMethods" : "insertClassMethods(methods, Class, value, fieldNames, returnAll) ",
	"insertMethod" : "insertMethod(mlist, signature, args, def, cacheOnly = FALSE) ",
	"insertSource" : "insertSource(source, package = \"\", functions = allPlainObjects(), ",
	"isClass" : "isClass(Class, formal = TRUE, where = topenv(parent.frame())) ",
	"isClassDef" : "isClassDef(object) ",
	"isClassUnion" : "isClassUnion(Class) ",
	"isGeneric" : "isGeneric(f, where = topenv(parent.frame()), fdef = NULL, getName = FALSE) ",
	"isGrammarSymbol" : "isGrammarSymbol(symbol) ",
	"isGroup" : "isGroup(f, where = topenv(parent.frame()), fdef = getGeneric(f, ",
	"isSealedClass" : "isSealedClass(Class, where = topenv(parent.frame())) ",
	"isSealedMethod" : "isSealedMethod(f, signature, fdef = getGeneric(f, FALSE, where = where), ",
	"isVirtualClass" : "isVirtualClass(Class, where = topenv(parent.frame())) ",
	"languageEl" : "languageEl(object, which) ",
	"linearizeMlist" : "linearizeMlist(mlist, inherited = TRUE) ",
	"listFromMethods" : "listFromMethods(generic, where, table) ",
	"listFromMlist" : "listFromMlist(mlist, prefix = list(), sigs. = TRUE, methods. = TRUE) ",
	"loadMethod" : "loadMethod(method, fname, envir) ",
	"Logic" : "Logic(e1, e2) ",
	"makeClassRepresentation" : "makeClassRepresentation(name, slots = list(), superClasses = character(), prototype = NULL, ",
	"makeExtends" : "makeExtends(Class, to, coerce = NULL, test = NULL, replace = NULL, ",
	"makeGeneric" : "makeGeneric(f, fdef, fdefault = fdef, group = list(), valueClass = character(), ",
	"makeMethodsList" : "makeMethodsList(object, level = 1) ",
	"makePrototypeFromClassDef" : "makePrototypeFromClassDef(slots, ClassDef, extends, where) ",
	"makeStandardGeneric" : "makeStandardGeneric(f, fdef) ",
	"matchSignature" : "matchSignature(signature, fun, where = baseenv()) ",
	"Math" : "Math(x) ",
	"mergeMethods" : "mergeMethods(m1, m2, genericLabel = character()) ",
	"metaNameUndo" : "metaNameUndo(strings, prefix, searchForm = FALSE) ",
	"method.skeleton" : "method.skeleton(generic, signature, file, external = FALSE, where = topenv(parent.frame())) ",
	"MethodAddCoerce" : "MethodAddCoerce(method, argName, thisClass, methodClass) ",
	"methodSignatureMatrix" : "methodSignatureMatrix(object, sigSlots = c(\"target\", \"defined\")) ",
	"MethodsList" : "MethodsList(.ArgName, ...) ",
	"MethodsListSelect" : "MethodsListSelect(f, env, mlist = NULL, fEnv = if (is(fdef, \"genericFunction\")) environment(fdef) else baseenv(), ",
	"methodsPackageMetaName" : "methodsPackageMetaName(prefix, name, package = \"\") ",
	"missingArg" : "missingArg(symbol, envir = parent.frame(), eval = FALSE) ",
	"mlistMetaName" : "mlistMetaName(name = \"\", package = \"\") ",
	"multipleClasses" : "multipleClasses(details = FALSE) ",
	"newBasic" : "newBasic(Class, ...) ",
	"newClassRepresentation" : "newClassRepresentation(...) ",
	"newEmptyObject" : "newEmptyObject() ",
	"packageSlot" : "packageSlot(object) ",
	"possibleExtends" : "possibleExtends(class1, class2, ClassDef1 = getClassDef(class1), ClassDef2 = getClassDef(class2, ",
	"prohibitGeneric" : "prohibitGeneric(name, where = topenv(parent.frame())) ",
	"promptClass" : "promptClass(clName, filename = NULL, type = \"class\", keywords = \"classes\", ",
	"promptMethods" : "promptMethods(f, filename = NULL, methods) ",
	"prototype" : "prototype(...) ",
	"Quote" : "Quote(expr) ",
	"reconcilePropertiesAndPrototype" : "reconcilePropertiesAndPrototype(name, properties, prototype, superClasses, where) ",
	"registerImplicitGenerics" : "registerImplicitGenerics(what = .ImplicitGenericsTable(where), where = topenv(parent.frame())) ",
	"rematchDefinition" : "rematchDefinition(definition, generic, mnames, fnames, signature) ",
	"removeClass" : "removeClass(Class, where = topenv(parent.frame())) ",
	"removeGeneric" : "removeGeneric(f, where = topenv(parent.frame())) ",
	"removeMethod" : "removeMethod(f, signature = character(), where = topenv(parent.frame())) ",
	"removeMethods" : "removeMethods(f, where = topenv(parent.frame()), all = missing(where)) ",
	"removeMethodsObject" : "removeMethodsObject(f, where = topenv(parent.frame())) ",
	"representation" : "representation(...) ",
	"requireMethods" : "requireMethods(functions, signature, message = \"\", where = topenv(parent.frame())) ",
	"resetClass" : "resetClass(Class, classDef, where) ",
	"resetGeneric" : "resetGeneric(f, fdef = getGeneric(f, where = where), mlist = getMethodsForDispatch(fdef), ",
	"sealClass" : "sealClass(Class, where = topenv(parent.frame())) ",
	"selectMethod" : "selectMethod(f, signature, optional = FALSE, useInherited = TRUE, ",
	"selectSuperClasses" : "selectSuperClasses(Class, dropVirtual = FALSE, namesOnly = TRUE, directOnly = TRUE, ",
	"setAs" : "setAs(from, to, def, replace = NULL, where = topenv(parent.frame())) ",
	"setClass" : "setClass(Class, representation = list(), prototype = NULL, contains = character(), ",
	"setClassUnion" : "setClassUnion(name, members = character(), where = topenv(parent.frame())) ",
	"setDataPart" : "setDataPart(object, value, check = TRUE) ",
	"setGeneric" : "setGeneric(name, def = NULL, group = list(), valueClass = character(), ",
	"setGenericImplicit" : "setGenericImplicit(name, where = topenv(parent.frame()), restore = TRUE) ",
	"setGroupGeneric" : "setGroupGeneric(name, def = NULL, group = list(), valueClass = character(), ",
	"setIs" : "setIs(class1, class2, test = NULL, coerce = NULL, replace = NULL, ",
	"setLoadAction" : "setLoadAction(action, aname = \"\", where = topenv(parent.frame())) ",
	"setLoadActions" : "setLoadActions(..., .where = topenv(parent.frame())) ",
	"setMethod" : "setMethod(f, signature = character(), definition, where = topenv(parent.frame()), ",
	"setOldClass" : "setOldClass(Classes, prototype = NULL, where = topenv(parent.frame()), ",
	"setPackageName" : "setPackageName(pkg, env) ",
	"setPrimitiveMethods" : "setPrimitiveMethods(f, fdef, code, generic, mlist = get(\".Methods\", envir = environment(generic))) ",
	"setRefClass" : "setRefClass(Class, fields = character(), contains = character(), ",
	"setReplaceMethod" : "setReplaceMethod(f, ..., where = topenv(parent.frame())) ",
	"setValidity" : "setValidity(Class, method, where = topenv(parent.frame())) ",
	"show" : "show(object) ",
	"showClass" : "showClass(Class, complete = TRUE, propertiesAreCalled = \"Slots\") ",
	"showDefault" : "showDefault(object, oldMethods = TRUE) ",
	"showExtends" : "showExtends(ext, printTo = stdout()) ",
	"showMethods" : "showMethods(f = character(), where = topenv(parent.frame()), classes = NULL, ",
	"showMlist" : "showMlist(mlist, includeDefs = TRUE, inherited = TRUE, classes = NULL, ",
	"signature" : "signature(...) ",
	"SignatureMethod" : "SignatureMethod(names, signature, definition) ",
	"sigToEnv" : "sigToEnv(signature, generic) ",
	"slot" : "slot(object, name) ",
	"slotNames" : "slotNames(x) ",
	"substituteDirect" : "substituteDirect(object, frame = parent.frame(), cleanFunction = TRUE) ",
	"substituteFunctionArgs" : "substituteFunctionArgs(def, newArgs, args = formalArgs(def), silent = FALSE, ",
	"Summary" : "Summary(x, ..., na.rm = FALSE) ",
	"superClassDepth" : "superClassDepth(ClassDef, soFar = ClassDef@className, simpleOnly = TRUE) ",
	"testInheritedMethods" : "testInheritedMethods(f, signatures, test = TRUE, virtual = FALSE, groupMethods = TRUE, ",
	"testVirtual" : "testVirtual(properties, extends, prototype, where) ",
	"traceOff" : "traceOff(whatL) ",
	"traceOn" : "traceOn(what, tracer = browseAll, exit = NULL) ",
	"tryNew" : "tryNew(Class, where) ",
	"unRematchDefinition" : "unRematchDefinition(definition) ",
	"validObject" : "validObject(object, test = FALSE, complete = FALSE) ",
	"validSlotNames" : "validSlotNames(names) ",
	"adist" : "adist(x, y = NULL, costs = NULL, counts = FALSE, fixed = TRUE, ",
	"alarm" : "alarm() ",
	"apropos" : "apropos(what, where = FALSE, ignore.case = TRUE, mode = \"any\") ",
	"aregexec" : "aregexec(pattern, text, max.distance = 0.1, costs = NULL, ignore.case = FALSE, ",
	"argsAnywhere" : "argsAnywhere(x) ",
	"as.person" : "as.person(x) ",
	"as.personList" : "as.personList(x) ",
	"as.relistable" : "as.relistable(x) ",
	"as.roman" : "as.roman(x) ",
	"aspell" : "aspell(files, filter, control = list(), encoding = \"unknown\", ",
	"aspell_package_C_files" : "aspell_package_C_files(dir, ignore = character(), control = list(), program = NULL, ",
	"aspell_package_R_files" : "aspell_package_R_files(dir, ignore = character(), control = list(), program = NULL, ",
	"aspell_package_Rd_files" : "aspell_package_Rd_files(dir, drop = c(\"\\\\author\", \"\\\\references\"), control = list(), ",
	"aspell_package_vignettes" : "aspell_package_vignettes(dir, control = list(), program = NULL, dictionaries = character()) ",
	"aspell_write_personal_dictionary_file" : "aspell_write_personal_dictionary_file(x, out, language = \"en\", program = NULL) ",
	"assignInMyNamespace" : "assignInMyNamespace(x, value) ",
	"assignInNamespace" : "assignInNamespace(x, value, ns, pos = -1, envir = as.environment(pos)) ",
	"available.packages" : "available.packages(contriburl = contrib.url(getOption(\"repos\"), type), ",
	"bibentry" : "bibentry(bibtype, textVersion = NULL, header = NULL, footer = NULL, ",
	"browseEnv" : "browseEnv(envir = .GlobalEnv, pattern, excludepatt = \"^last\\\\.warning\", ",
	"browseURL" : "browseURL(url, browser = getOption(\"browser\"), encodeIfNeeded = FALSE) ",
	"browseVignettes" : "browseVignettes(package = NULL, lib.loc = NULL, all = TRUE) ",
	"bug.report" : "bug.report(subject = \"\", address, file = \"R.bug.report\", package = NULL, ",
	"capture.output" : "capture.output(..., file = NULL, append = FALSE) ",
	"changedFiles" : "changedFiles(before, after, path = before$path, timestamp = before$timestamp, ",
	"checkCRAN" : "checkCRAN(method) ",
	"chooseBioCmirror" : "chooseBioCmirror(graphics = getOption(\"menu.graphics\"), ind = NULL) ",
	"chooseCRANmirror" : "chooseCRANmirror(graphics = getOption(\"menu.graphics\"), ind = NULL) ",
	"citation" : "citation(package = \"base\", lib.loc = NULL, auto = NULL) ",
	"cite" : "cite(keys, bib, ...) ",
	"citeNatbib" : "citeNatbib(keys, bib, textual = FALSE, before = NULL, after = NULL, ",
	"citEntry" : "citEntry(entry, textVersion, header = NULL, footer = NULL, ...) ",
	"citFooter" : "citFooter(...) ",
	"citHeader" : "citHeader(...) ",
	"close.socket" : "close.socket(socket, ...) ",
	"combn" : "combn(x, m, FUN = NULL, simplify = TRUE, ...) ",
	"compareVersion" : "compareVersion(a, b) ",
	"contrib.url" : "contrib.url(repos, type = getOption(\"pkgType\")) ",
	"count.fields" : "count.fields(file, sep = \"\", quote = \"\\\"'\", skip = 0, blank.lines.skip = TRUE, ",
	"CRAN.packages" : "CRAN.packages(CRAN = getOption(\"repos\"), method, contriburl = contrib.url(CRAN)) ",
	"create.post" : "create.post(instructions = character(), description = \"post\", subject = \"\", ",
	"data" : "data(..., list = character(), package = NULL, lib.loc = NULL, ",
	"data.entry" : "data.entry(..., Modes = NULL, Names = NULL) ",
	"dataentry" : "dataentry(data, modes) ",
	"de.ncols" : "de.ncols(inlist) ",
	"de.restore" : "de.restore(inlist, ncols, coltypes, argnames, args) ",
	"de.setup" : "de.setup(ilist, list.names, incols) ",
	"debugger" : "debugger(dump = last.dump) ",
	"demo" : "demo(topic, package = NULL, lib.loc = NULL, character.only = FALSE, ",
	"download.file" : "download.file(url, destfile, method, quiet = FALSE, mode = \"w\", cacheOK = TRUE, ",
	"download.packages" : "download.packages(pkgs, destdir, available = NULL, repos = getOption(\"repos\"), ",
	"dump.frames" : "dump.frames(dumpto = \"last.dump\", to.file = FALSE) ",
	"edit" : "edit(name, ...) ",
	"emacs" : "emacs(name = NULL, file = \"\") ",
	"example" : "example(topic, package = NULL, lib.loc = NULL, character.only = FALSE, ",
	"file_test" : "file_test(op, x, y) ",
	"file.edit" : "file.edit(..., title = file, editor = getOption(\"editor\"), fileEncoding = \"\") ",
	"fileSnapshot" : "fileSnapshot(path = \".\", file.info = TRUE, timestamp = NULL, md5sum = FALSE, ",
	"find" : "find(what, mode = \"any\", numeric = FALSE, simple.words = TRUE) ",
	"findLineNum" : "findLineNum(srcfile, line, nameonly = TRUE, envir = parent.frame(), ",
	"fixInNamespace" : "fixInNamespace(x, ns, pos = -1, envir = as.environment(pos), ...) ",
	"flush.console" : "flush.console() ",
	"formatOL" : "formatOL(x, type = \"arabic\", offset = 0, start = 1, width = 0.9 * ",
	"formatUL" : "formatUL(x, label = \"*\", offset = 0, width = 0.9 * getOption(\"width\")) ",
	"getAnywhere" : "getAnywhere(x) ",
	"getCRANmirrors" : "getCRANmirrors(all = FALSE, local.only = FALSE) ",
	"getFromNamespace" : "getFromNamespace(x, ns, pos = -1, envir = as.environment(pos)) ",
	"getParseData" : "getParseData(x, includeText = NA) ",
	"getParseText" : "getParseText(parseData, id) ",
	"getSrcDirectory" : "getSrcDirectory(x, unique = TRUE) ",
	"getSrcFilename" : "getSrcFilename(x, full.names = FALSE, unique = TRUE) ",
	"getSrcLocation" : "getSrcLocation(x, which = c(\"line\", \"column\", \"byte\", \"parse\"), first = TRUE) ",
	"getSrcref" : "getSrcref(x) ",
	"getTxtProgressBar" : "getTxtProgressBar(pb) ",
	"globalVariables" : "globalVariables(names, package, add = TRUE) ",
	"head" : "head(x, ...) ",
	"head.matrix" : "head.matrix(x, n = 6L, ...) ",
	"help" : "help(topic, package = NULL, lib.loc = NULL, verbose = getOption(\"verbose\"), ",
	"help.request" : "help.request(subject = \"\", address = \"r-help@R-project.org\", file = \"R.help.request\", ",
	"help.search" : "help.search(pattern, fields = c(\"alias\", \"concept\", \"title\"), apropos, ",
	"help.start" : "help.start(update = FALSE, gui = \"irrelevant\", browser = getOption(\"browser\"), ",
	"history" : "history(max.show = 25, reverse = FALSE, pattern, ...) ",
	"install.packages" : "install.packages(pkgs, lib, repos = getOption(\"repos\"), contriburl = contrib.url(repos, ",
	"installed.packages" : "installed.packages(lib.loc = NULL, priority = NULL, noCache = FALSE, fields = NULL, ",
	"is.relistable" : "is.relistable(x) ",
	"limitedLabels" : "limitedLabels(value, maxwidth = getOption(\"width\") - 5L) ",
	"loadhistory" : "loadhistory(file = \".Rhistory\") ",
	"localeToCharset" : "localeToCharset(locale = Sys.getlocale(\"LC_CTYPE\")) ",
	"ls.str" : "ls.str(pos = -1, name, envir, all.names = FALSE, pattern, ",
	"lsf.str" : "lsf.str(pos = -1, envir, ...) ",
	"maintainer" : "maintainer(pkg) ",
	"make.packages.html" : "make.packages.html(lib.loc = .libPaths(), temp = FALSE, verbose = TRUE, ",
	"make.socket" : "make.socket(host = \"localhost\", port, fail = TRUE, server = FALSE) ",
	"makeRweaveLatexCodeRunner" : "makeRweaveLatexCodeRunner(evalFunc = RweaveEvalWithOpt) ",
	"memory.limit" : "memory.limit(size = NA) ",
	"memory.size" : "memory.size(max = FALSE) ",
	"menu" : "menu(choices, graphics = FALSE, title = NULL) ",
	"methods" : "methods(generic.function, class) ",
	"modifyList" : "modifyList(x, val, keep.null = FALSE) ",
	"new.packages" : "new.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, ",
	"news" : "news(query, package = \"R\", lib.loc = NULL, format = NULL, ",
	"object.size" : "object.size(x) ",
	"old.packages" : "old.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, ",
	"package.skeleton" : "package.skeleton(name = \"anRpackage\", list = character(), environment = .GlobalEnv, ",
	"packageDescription" : "packageDescription(pkg, lib.loc = NULL, fields = NULL, drop = TRUE, encoding = \"\") ",
	"packageName" : "packageName(env = parent.frame()) ",
	"packageStatus" : "packageStatus(lib.loc = NULL, repositories = NULL, method, type = getOption(\"pkgType\")) ",
	"packageVersion" : "packageVersion(pkg, lib.loc = NULL) ",
	"page" : "page(x, method = c(\"dput\", \"print\"), ...) ",
	"person" : "person(given = NULL, family = NULL, middle = NULL, email = NULL, ",
	"personList" : "personList(...) ",
	"pico" : "pico(name = NULL, file = \"\") ",
	"process.events" : "process.events() ",
	"prompt" : "prompt(object, filename = NULL, name = NULL, ...) ",
	"promptData" : "promptData(object, filename = NULL, name = NULL) ",
	"promptImport" : "promptImport(object, filename = NULL, name = NULL, importedFrom = NULL, ",
	"promptPackage" : "promptPackage(package, lib.loc = NULL, filename = NULL, name = NULL, ",
	"rc.getOption" : "rc.getOption(name) ",
	"rc.options" : "rc.options(...) ",
	"rc.settings" : "rc.settings(ops, ns, args, func, ipck, S3, data, help, argdb, fuzzy, ",
	"rc.status" : "rc.status() ",
	"read.csv" : "read.csv(file, header = TRUE, sep = \",\", quote = \"\\\"\", dec = \".\", ",
	"read.delim" : "read.delim(file, header = TRUE, sep = \"\\t\", quote = \"\\\"\", dec = \".\", ",
	"read.DIF" : "read.DIF(file, header = FALSE, dec = \".\", numerals = c(\"allow.loss\", ",
	"read.fortran" : "read.fortran(file, format, ..., as.is = TRUE, colClasses = NA) ",
	"read.fwf" : "read.fwf(file, widths, header = FALSE, sep = \"\\t\", skip = 0, ",
	"read.socket" : "read.socket(socket, maxlen = 256L, loop = FALSE) ",
	"read.table" : "read.table(file, header = FALSE, sep = \"\", quote = \"\\\"'\", dec = \".\", ",
	"readCitationFile" : "readCitationFile(file, meta = NULL) ",
	"recover" : "recover() ",
	"relist" : "relist(flesh, skeleton = attr(flesh, \"skeleton\")) ",
	"remove.packages" : "remove.packages(pkgs, lib) ",
	"removeSource" : "removeSource(fn) ",
	"Rprof" : "Rprof(filename = \"Rprof.out\", append = FALSE, interval = 0.02, ",
	"Rprofmem" : "Rprofmem(filename = \"Rprofmem.out\", append = FALSE, threshold = 0) ",
	"RShowDoc" : "RShowDoc(what, type = c(\"pdf\", \"html\", \"txt\"), package) ",
	"RSiteSearch" : "RSiteSearch(string, restrict = c(\"functions\", \"vignettes\", \"views\"), ",
	"rtags" : "rtags(path = \".\", pattern = \"\\\\.[RrSs]$\", recursive = FALSE, ",
	"Rtangle" : "Rtangle() ",
	"RtangleSetup" : "RtangleSetup(file, syntax, output = NULL, annotate = TRUE, split = FALSE, ",
	"RtangleWritedoc" : "RtangleWritedoc(object, chunk) ",
	"RweaveChunkPrefix" : "RweaveChunkPrefix(options) ",
	"RweaveEvalWithOpt" : "RweaveEvalWithOpt(expr, options) ",
	"RweaveLatex" : "RweaveLatex() ",
	"RweaveLatexFinish" : "RweaveLatexFinish(object, error = FALSE) ",
	"RweaveLatexOptions" : "RweaveLatexOptions(options) ",
	"RweaveLatexSetup" : "RweaveLatexSetup(file, syntax, output = NULL, quiet = FALSE, debug = FALSE, ",
	"RweaveLatexWritedoc" : "RweaveLatexWritedoc(object, chunk) ",
	"RweaveTryStop" : "RweaveTryStop(err, options) ",
	"savehistory" : "savehistory(file = \".Rhistory\") ",
	"select.list" : "select.list(choices, preselect = NULL, multiple = FALSE, title = NULL, ",
	"sessionInfo" : "sessionInfo(package = NULL) ",
	"setBreakpoint" : "setBreakpoint(srcfile, line, nameonly = TRUE, envir = parent.frame(), ",
	"setRepositories" : "setRepositories(graphics = getOption(\"menu.graphics\"), ind = NULL, ",
	"setTxtProgressBar" : "setTxtProgressBar(pb, value, title = NULL, label = NULL) ",
	"stack" : "stack(x, ...) ",
	"Stangle" : "Stangle(file, driver = Rtangle(), syntax = getOption(\"SweaveSyntax\"), ",
	"strOptions" : "strOptions(strict.width = \"no\", digits.d = 3, vec.len = 4, formatNum = function(x, ",
	"summaryRprof" : "summaryRprof(filename = \"Rprof.out\", chunksize = 5000, memory = c(\"none\", ",
	"suppressForeignCheck" : "suppressForeignCheck(names, package, add = TRUE) ",
	"Sweave" : "Sweave(file, driver = RweaveLatex(), syntax = getOption(\"SweaveSyntax\"), ",
	"SweaveHooks" : "SweaveHooks(options, run = FALSE, envir = .GlobalEnv) ",
	"SweaveSyntConv" : "SweaveSyntConv(file, syntax, output = NULL) ",
	"tail" : "tail(x, ...) ",
	"tail.matrix" : "tail.matrix(x, n = 6L, addrownums = TRUE, ...) ",
	"timestamp" : "timestamp(stamp = date(), prefix = \"##------ \", suffix = \" ------##\", ",
	"toBibtex" : "toBibtex(object, ...) ",
	"toLatex" : "toLatex(object, ...) ",
	"txtProgressBar" : "txtProgressBar(min = 0, max = 1, initial = 0, char = \"=\", width = NA, ",
	"type.convert" : "type.convert(x, na.strings = \"NA\", as.is = FALSE, dec = \".\", numerals = c(\"allow.loss\", ",
	"unstack" : "unstack(x, ...) ",
	"untar" : "untar(tarfile, files = NULL, list = FALSE, exdir = \".\", compressed = NA, ",
	"unzip" : "unzip(zipfile, files = NULL, list = FALSE, overwrite = TRUE, ",
	"update.packages" : "update.packages(lib.loc = NULL, repos = getOption(\"repos\"), contriburl = contrib.url(repos, ",
	"update.packageStatus" : "update.packageStatus(object, lib.loc = levels(object$inst$LibPath), repositories = levels(object$avail$Repository), ",
	"upgrade" : "upgrade(object, ...) ",
	"url.show" : "url.show(url, title = url, file = tempfile(), delete.file = TRUE, ",
	"URLdecode" : "URLdecode(URL) ",
	"URLencode" : "URLencode(URL, reserved = FALSE) ",
	"View" : "View(x, title) ",
	"vignette" : "vignette(topic, package = NULL, lib.loc = NULL, all = TRUE) ",
	"write.csv" : "write.csv(...) ",
	"write.socket" : "write.socket(socket, string) ",
	"write.table" : "write.table(x, file = \"\", append = FALSE, quote = TRUE, sep = \" \", ",
	"xedit" : "xedit(name = NULL, file = \"\") ",
	"xemacs" : "xemacs(name = NULL, file = \"\") ",
	"abline" : "abline(a = NULL, b = NULL, h = NULL, v = NULL, reg = NULL, ",
	"arrows" : "arrows(x0, y0, x1 = x0, y1 = y0, length = 0.25, angle = 30, ",
	"assocplot" : "assocplot(x, col = c(\"black\", \"red\"), space = 0.3, main = NULL, ",
	"axis" : "axis(side, at = NULL, labels = TRUE, tick = TRUE, line = NA, ",
	"Axis" : "Axis(x = NULL, at = NULL, ..., side, labels = NULL) ",
	"axis.Date" : "axis.Date(side, x, at, format, labels = TRUE, ...) ",
	"axis.POSIXct" : "axis.POSIXct(side, x, at, format, labels = TRUE, ...) ",
	"axTicks" : "axTicks(side, axp = NULL, usr = NULL, log = NULL, nintLog = NULL) ",
	"barplot" : "barplot(height, ...) ",
	"barplot.default" : "barplot.default(height, width = 1, space = NULL, names.arg = NULL, ",
	"boxplot" : "boxplot(x, ...) ",
	"boxplot.default" : "boxplot.default(x, ..., range = 1.5, width = NULL, varwidth = FALSE, ",
	"boxplot.matrix" : "boxplot.matrix(x, use.cols = TRUE, ...) ",
	"cdplot" : "cdplot(x, ...) ",
	"clip" : "clip(x1, x2, y1, y2) ",
	"close.screen" : "close.screen(n, all.screens = FALSE) ",
	"co.intervals" : "co.intervals(x, number = 6, overlap = 0.5) ",
	"contour" : "contour(x, ...) ",
	"contour.default" : "contour.default(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, ",
	"coplot" : "coplot(formula, data, given.values, panel = points, rows, ",
	"curve" : "curve(expr, from = NULL, to = NULL, n = 101, add = FALSE, ",
	"dotchart" : "dotchart(x, labels = NULL, groups = NULL, gdata = NULL, cex = par(\"cex\"), ",
	"erase.screen" : "erase.screen(n = cur.screen) ",
	"filled.contour" : "filled.contour(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, ",
	"fourfoldplot" : "fourfoldplot(x, color = c(\"#99CCFF\", \"#6699CC\"), conf.level = 0.95, ",
	"frame" : "frame() ",
	"grconvertX" : "grconvertX(x, from = \"user\", to = \"user\") ",
	"grconvertY" : "grconvertY(y, from = \"user\", to = \"user\") ",
	"grid" : "grid(nx = NULL, ny = nx, col = \"lightgray\", lty = \"dotted\", ",
	"hist" : "hist(x, ...) ",
	"hist.default" : "hist.default(x, breaks = \"Sturges\", freq = NULL, probability = !freq, ",
	"identify" : "identify(x, ...) ",
	"image" : "image(x, ...) ",
	"image.default" : "image.default(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, ",
	"layout" : "layout(mat, widths = rep.int(1, ncol(mat)), heights = rep.int(1, ",
	"layout.show" : "layout.show(n = 1) ",
	"legend" : "legend(x, y = NULL, legend, fill = NULL, col = par(\"col\"), ",
	"lines" : "lines(x, ...) ",
	"lines.default" : "lines.default(x, y = NULL, type = \"l\", ...) ",
	"locator" : "locator(n = 512, type = \"n\", ...) ",
	"matlines" : "matlines(x, y, type = \"l\", lty = 1:5, lwd = 1, pch = NULL, col = 1:6, ",
	"matplot" : "matplot(x, y, type = \"p\", lty = 1:5, lwd = 1, lend = par(\"lend\"), ",
	"matpoints" : "matpoints(x, y, type = \"p\", lty = 1:5, lwd = 1, pch = NULL, col = 1:6, ",
	"mosaicplot" : "mosaicplot(x, ...) ",
	"mtext" : "mtext(text, side = 3, line = 0, outer = FALSE, at = NA, adj = NA, ",
	"pairs" : "pairs(x, ...) ",
	"pairs.default" : "pairs.default(x, labels, panel = points, ..., lower.panel = panel, ",
	"panel.smooth" : "panel.smooth(x, y, col = par(\"col\"), bg = NA, pch = par(\"pch\"), ",
	"persp" : "persp(x, ...) ",
	"plot" : "plot(x, y, ...) ",
	"plot.default" : "plot.default(x, y = NULL, type = \"p\", xlim = NULL, ylim = NULL, ",
	"plot.design" : "plot.design(x, y = NULL, fun = mean, data = NULL, ..., ylim = NULL, ",
	"plot.function" : "plot.function(x, y = 0, to = 1, from = y, xlim = NULL, ylab = NULL, ",
	"plot.new" : "plot.new() ",
	"plot.window" : "plot.window(xlim, ylim, log = \"\", asp = NA, ...) ",
	"plot.xy" : "plot.xy(xy, type, pch = par(\"pch\"), lty = par(\"lty\"), col = par(\"col\"), ",
	"points" : "points(x, ...) ",
	"points.default" : "points.default(x, y = NULL, type = \"p\", ...) ",
	"polygon" : "polygon(x, y = NULL, density = NULL, angle = 45, border = NULL, ",
	"polypath" : "polypath(x, y = NULL, border = NULL, col = NA, lty = par(\"lty\"), ",
	"rasterImage" : "rasterImage(image, xleft, ybottom, xright, ytop, angle = 0, interpolate = TRUE, ",
	"rect" : "rect(xleft, ybottom, xright, ytop, density = NULL, angle = 45, ",
	"screen" : "screen(n = cur.screen, new = TRUE) ",
	"segments" : "segments(x0, y0, x1 = x0, y1 = y0, col = par(\"fg\"), lty = par(\"lty\"), ",
	"smoothScatter" : "smoothScatter(x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(c(\"white\", ",
	"spineplot" : "spineplot(x, ...) ",
	"split.screen" : "split.screen(figs, screen, erase = TRUE) ",
	"stars" : "stars(x, full = TRUE, scale = TRUE, radius = TRUE, labels = dimnames(x)[[1L]], ",
	"stem" : "stem(x, scale = 1, width = 80, atom = 1e-08) ",
	"strheight" : "strheight(s, units = \"user\", cex = NULL, font = NULL, vfont = NULL, ",
	"stripchart" : "stripchart(x, ...) ",
	"strwidth" : "strwidth(s, units = \"user\", cex = NULL, font = NULL, vfont = NULL, ",
	"sunflowerplot" : "sunflowerplot(x, ...) ",
	"symbols" : "symbols(x, y = NULL, circles, squares, rectangles, stars, thermometers, ",
	"text" : "text(x, ...) ",
	"text.default" : "text.default(x, y = NULL, labels = seq_along(x), adj = NULL, pos = NULL, ",
	"title" : "title(main = NULL, sub = NULL, xlab = NULL, ylab = NULL, ",
	"xinch" : "xinch(x = 1, warn.log = TRUE) ",
	"xspline" : "xspline(x, y = NULL, shape = 0, open = TRUE, repEnds = TRUE, ",
	"xyinch" : "xyinch(xy = 1, warn.log = TRUE) ",
	"yinch" : "yinch(y = 1, warn.log = TRUE) ",
	"adjustcolor" : "adjustcolor(col, alpha.f = 1, red.f = 1, green.f = 1, blue.f = 1, ",
	"as.graphicsAnnot" : "as.graphicsAnnot(x) ",
	"as.raster" : "as.raster(x, ...) ",
	"axisTicks" : "axisTicks(usr, log, axp = NULL, nint = 5) ",
	"bitmap" : "bitmap(file, type = \"png16m\", height = 7, width = 7, res = 72, ",
	"boxplot.stats" : "boxplot.stats(x, coef = 1.5, do.conf = TRUE, do.out = TRUE) ",
	"cairo_pdf" : "cairo_pdf(filename = if (onefile) \"Rplots.pdf\" else \"Rplot%03d.pdf\", ",
	"cairo_ps" : "cairo_ps(filename = if (onefile) \"Rplots.ps\" else \"Rplot%03d.ps\", ",
	"check.options" : "check.options(new, name.opt, reset = FALSE, assign.opt = FALSE, envir = .GlobalEnv, ",
	"chull" : "chull(x, y = NULL) ",
	"CIDFont" : "CIDFont(family, cmap, cmapEncoding, pdfresource = \"\") ",
	"cm.colors" : "cm.colors(n, alpha = 1) ",
	"colorConverter" : "colorConverter(toXYZ, fromXYZ, name, white = NULL) ",
	"colorRamp" : "colorRamp(colors, bias = 1, space = c(\"rgb\", \"Lab\"), interpolate = c(\"linear\", ",
	"colorRampPalette" : "colorRampPalette(colors, ...) ",
	"colors" : "colors(distinct = FALSE) ",
	"colours" : "colours(distinct = FALSE) ",
	"contourLines" : "contourLines(x = seq(0, 1, length.out = nrow(z)), y = seq(0, 1, ",
	"convertColor" : "convertColor(color, from, to, from.ref.white = NULL, to.ref.white = NULL, ",
	"densCols" : "densCols(x, y = NULL, nbin = 128, bandwidth, colramp = colorRampPalette(blues9[-(1:3)])) ",
	"dev.capabilities" : "dev.capabilities(what = NULL) ",
	"dev.capture" : "dev.capture(native = FALSE) ",
	"dev.control" : "dev.control(displaylist = c(\"inhibit\", \"enable\")) ",
	"dev.copy" : "dev.copy(device, ..., which = dev.next()) ",
	"dev.cur" : "dev.cur() ",
	"dev.flush" : "dev.flush(level = 1L) ",
	"dev.hold" : "dev.hold(level = 1L) ",
	"dev.interactive" : "dev.interactive(orNone = FALSE) ",
	"dev.list" : "dev.list() ",
	"dev.new" : "dev.new(..., noRStudioGD = FALSE) ",
	"dev.next" : "dev.next(which = dev.cur()) ",
	"dev.off" : "dev.off(which = dev.cur()) ",
	"dev.prev" : "dev.prev(which = dev.cur()) ",
	"dev.print" : "dev.print(device = postscript, ...) ",
	"dev.set" : "dev.set(which = dev.next()) ",
	"dev.size" : "dev.size(units = c(\"in\", \"cm\", \"px\")) ",
	"devAskNewPage" : "devAskNewPage(ask = NULL) ",
	"deviceIsInteractive" : "deviceIsInteractive(name = NULL) ",
	"embedFonts" : "embedFonts(file, format, outfile = file, fontpaths = character(), ",
	"extendrange" : "extendrange(x, r = range(x, na.rm = TRUE), f = 0.05) ",
	"getGraphicsEvent" : "getGraphicsEvent(prompt = \"Waiting for input\", onMouseDown = NULL, onMouseMove = NULL, ",
	"getGraphicsEventEnv" : "getGraphicsEventEnv(which = dev.cur()) ",
	"graphics.off" : "graphics.off() ",
	"gray" : "gray(level, alpha = NULL) ",
	"gray.colors" : "gray.colors(n, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL) ",
	"grey" : "grey(level, alpha = NULL) ",
	"grey.colors" : "grey.colors(n, start = 0.3, end = 0.9, gamma = 2.2, alpha = NULL) ",
	"heat.colors" : "heat.colors(n, alpha = 1) ",
	"is.raster" : "is.raster(x) ",
	"jpeg" : "jpeg(filename = \"Rplot%03d.jpeg\", width = 480, height = 480, ",
	"make.rgb" : "make.rgb(red, green, blue, name = NULL, white = \"D65\", gamma = 2.2) ",
	"nclass.FD" : "nclass.FD(x) ",
	"nclass.scott" : "nclass.scott(x) ",
	"nclass.Sturges" : "nclass.Sturges(x) ",
	"palette" : "palette(value) ",
	"pdf.options" : "pdf.options(..., reset = FALSE) ",
	"pdfFonts" : "pdfFonts(...) ",
	"pictex" : "pictex(file = \"Rplots.tex\", width = 5, height = 4, debug = FALSE, ",
	"postscript" : "postscript(file = ifelse(onefile, \"Rplots.ps\", \"Rplot%03d.ps\"), ",
	"postscriptFonts" : "postscriptFonts(...) ",
	"ps.options" : "ps.options(..., reset = FALSE, override.check = FALSE) ",
	"quartz" : "quartz(title, width, height, pointsize, family, antialias, ",
	"quartz.options" : "quartz.options(..., reset = FALSE) ",
	"quartz.save" : "quartz.save(file, type = \"png\", device = dev.cur(), dpi = 100, ",
	"quartzFont" : "quartzFont(family) ",
	"quartzFonts" : "quartzFonts(...) ",
	"rainbow" : "rainbow(n, s = 1, v = 1, start = 0, end = max(1, n - 1)/n, ",
	"recordGraphics" : "recordGraphics(expr, list, env) ",
	"recordPlot" : "recordPlot() ",
	"replayPlot" : "replayPlot(x) ",
	"savePlot" : "savePlot(filename = paste(\"Rplot\", type, sep = \".\"), type = c(\"png\", ",
	"setEPS" : "setEPS(...) ",
	"setGraphicsEventEnv" : "setGraphicsEventEnv(which = dev.cur(), env) ",
	"setGraphicsEventHandlers" : "setGraphicsEventHandlers(which = dev.cur(), ...) ",
	"setPS" : "setPS(...) ",
	"terrain.colors" : "terrain.colors(n, alpha = 1) ",
	"tiff" : "tiff(filename = \"Rplot%03d.tiff\", width = 480, height = 480, ",
	"topo.colors" : "topo.colors(n, alpha = 1) ",
	"xfig" : "xfig(file = ifelse(onefile, \"Rplots.fig\", \"Rplot%03d.fig\"), ",
	"xy.coords" : "xy.coords(x, y = NULL, xlab = NULL, ylab = NULL, log = NULL, ",
	"xyTable" : "xyTable(x, y = NULL, digits) ",
	"xyz.coords" : "xyz.coords(x, y = NULL, z = NULL, xlab = NULL, ylab = NULL, zlab = NULL, ",
	"address" : "address(x) ",
	"alloc.col" : "alloc.col(DT, n = getOption(\"datatable.alloccol\"), verbose = getOption(\"datatable.verbose\")) ",
	"as.chron.IDate" : "as.chron.IDate(x, time = NULL, ...) ",
	"as.chron.ITime" : "as.chron.ITime(x, date = NULL, ...) ",
	"as.data.table" : "as.data.table(x, keep.rownames = FALSE) ",
	"as.IDate" : "as.IDate(x, ...) ",
	"as.ITime" : "as.ITime(x, ...) ",
	"between" : "between(x, lower, upper, incbounds = TRUE) ",
	"chgroup" : "chgroup(x) ",
	"chmatch" : "chmatch(x, table, nomatch = NA_integer_) ",
	"chorder" : "chorder(x) ",
	"copy" : "copy(x) ",
	"data.table" : "data.table(..., keep.rownames = FALSE, check.names = FALSE, key = NULL) ",
	"dcast.data.table" : "dcast.data.table(data, formula, fun.aggregate = NULL, ..., margins = NULL, ",
	"foverlaps" : "foverlaps(x, y, by.x = if (!is.null(key(x))) key(x) else key(y), ",
	"fread" : "fread(input = \"\", sep = \"auto\", sep2 = \"auto\", nrows = -1L, ",
	"getNumericRounding" : "getNumericRounding() ",
	"haskey" : "haskey(x) ",
	"hour" : "hour(x) ",
	"IDateTime" : "IDateTime(x, ...) ",
	"is.data.table" : "is.data.table(x) ",
	"last" : "last(x, ...) ",
	"like" : "like(vector, pattern) ",
	"mday" : "mday(x) ",
	"month" : "month(x) ",
	"quarter" : "quarter(x) ",
	"rbindlist" : "rbindlist(l, use.names = fill, fill = FALSE) ",
	"setattr" : "setattr(x, name, value) ",
	"setcolorder" : "setcolorder(x, neworder) ",
	"setDF" : "setDF(x) ",
	"setDT" : "setDT(x, giveNames = TRUE, keep.rownames = FALSE) ",
	"setkey" : "setkey(x, ..., verbose = getOption(\"datatable.verbose\"), physical = TRUE) ",
	"setkeyv" : "setkeyv(x, cols, verbose = getOption(\"datatable.verbose\"), ",
	"setnames" : "setnames(x, old, new) ",
	"setNumericRounding" : "setNumericRounding(x) ",
	"setorder" : "setorder(x, ..., na.last = FALSE) ",
	"setorderv" : "setorderv(x, cols, order = 1L, na.last = FALSE) ",
	"tables" : "tables(mb = TRUE, order.col = \"NAME\", width = 80, env = parent.frame(), ",
	"test.data.table" : "test.data.table(verbose = FALSE, pkg = \"pkg\") ",
	"timetaken" : "timetaken(started.at) ",
	"truelength" : "truelength(x) ",
	"wday" : "wday(x) ",
	"week" : "week(x) ",
	"yday" : "yday(x) ",
	"year" : "year(x) ",
	"aes_all" : "aes_all(vars) ",
	"aes_auto" : "aes_auto(data = NULL, ...) ",
	"aes_q" : "aes_q(x = NULL, y = NULL, ...) ",
	"aes_string" : "aes_string(x = NULL, y = NULL, ...) ",
	"annotate" : "annotate(geom, x = NULL, y = NULL, xmin = NULL, xmax = NULL, ",
	"annotation_custom" : "annotation_custom(grob, xmin = -Inf, xmax = Inf, ymin = -Inf, ymax = Inf) ",
	"annotation_logticks" : "annotation_logticks(base = 10, sides = \"bl\", scaled = TRUE, short = unit(0.1, ",
	"annotation_map" : "annotation_map(map, ...) ",
	"annotation_raster" : "annotation_raster(raster, xmin, xmax, ymin, ymax, interpolate = FALSE) ",
	"autoplot" : "autoplot(object, ...) ",
	"benchplot" : "benchplot(x) ",
	"borders" : "borders(database = \"world\", regions = \".\", fill = NA, colour = \"grey50\", ",
	"calc_element" : "calc_element(element, theme, verbose = FALSE) ",
	"continuous_scale" : "continuous_scale(aesthetics, scale_name, palette, name = NULL, breaks = waiver(), ",
	"coord" : "coord(..., subclass = c()) ",
	"coord_cartesian" : "coord_cartesian(xlim = NULL, ylim = NULL, wise = NULL) ",
	"coord_equal" : "coord_equal(ratio = 1, xlim = NULL, ylim = NULL, wise = NULL) ",
	"coord_fixed" : "coord_fixed(ratio = 1, xlim = NULL, ylim = NULL, wise = NULL) ",
	"coord_flip" : "coord_flip(...) ",
	"coord_map" : "coord_map(projection = \"mercator\", ..., orientation = NULL, xlim = NULL, ",
	"coord_polar" : "coord_polar(theta = \"x\", start = 0, direction = 1) ",
	"coord_quickmap" : "coord_quickmap(xlim = NULL, ylim = NULL) ",
	"coord_trans" : "coord_trans(xtrans = \"identity\", ytrans = \"identity\", limx = NULL, ",
	"cut_interval" : "cut_interval(x, n = NULL, length = NULL, ...) ",
	"cut_number" : "cut_number(x, n = NULL, ...) ",
	"discrete_scale" : "discrete_scale(aesthetics, scale_name, palette, name = NULL, breaks = waiver(), ",
	"element_blank" : "element_blank() ",
	"element_line" : "element_line(colour = NULL, size = NULL, linetype = NULL, lineend = NULL, ",
	"element_rect" : "element_rect(fill = NULL, colour = NULL, size = NULL, linetype = NULL, ",
	"element_text" : "element_text(family = NULL, face = NULL, colour = NULL, size = NULL, ",
	"expand_limits" : "expand_limits(...) ",
	"facet" : "facet(..., shrink = TRUE, subclass = c()) ",
	"facet_grid" : "facet_grid(facets, margins = FALSE, scales = \"fixed\", space = \"fixed\", ",
	"facet_null" : "facet_null(shrink = TRUE) ",
	"facet_wrap" : "facet_wrap(facets, nrow = NULL, ncol = NULL, scales = \"fixed\", ",
	"fortify" : "fortify(model, data, ...) ",
	"geom_abline" : "geom_abline(mapping = NULL, data = NULL, stat = \"abline\", position = \"identity\", ",
	"geom_area" : "geom_area(mapping = NULL, data = NULL, stat = \"identity\", position = \"stack\", ",
	"geom_bar" : "geom_bar(mapping = NULL, data = NULL, stat = \"bin\", position = \"stack\", ",
	"geom_blank" : "geom_blank(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_boxplot" : "geom_boxplot(mapping = NULL, data = NULL, stat = \"boxplot\", position = \"dodge\", ",
	"geom_contour" : "geom_contour(mapping = NULL, data = NULL, stat = \"contour\", position = \"identity\", ",
	"geom_crossbar" : "geom_crossbar(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_density" : "geom_density(mapping = NULL, data = NULL, stat = \"density\", position = \"identity\", ",
	"geom_dotplot" : "geom_dotplot(mapping = NULL, data = NULL, stat = \"bindot\", position = \"identity\", ",
	"geom_errorbar" : "geom_errorbar(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_errorbarh" : "geom_errorbarh(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_freqpoly" : "geom_freqpoly(mapping = NULL, data = NULL, stat = \"bin\", position = \"identity\", ",
	"geom_hex" : "geom_hex(mapping = NULL, data = NULL, stat = \"binhex\", position = \"identity\", ",
	"geom_histogram" : "geom_histogram(mapping = NULL, data = NULL, stat = \"bin\", position = \"stack\", ",
	"geom_hline" : "geom_hline(mapping = NULL, data = NULL, stat = \"hline\", position = \"identity\", ",
	"geom_jitter" : "geom_jitter(mapping = NULL, data = NULL, stat = \"identity\", position = \"jitter\", ",
	"geom_line" : "geom_line(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_linerange" : "geom_linerange(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_map" : "geom_map(mapping = NULL, data = NULL, map, stat = \"identity\", ",
	"geom_path" : "geom_path(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_point" : "geom_point(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_pointrange" : "geom_pointrange(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_polygon" : "geom_polygon(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_quantile" : "geom_quantile(mapping = NULL, data = NULL, stat = \"quantile\", position = \"identity\", ",
	"geom_raster" : "geom_raster(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_rect" : "geom_rect(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_ribbon" : "geom_ribbon(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_rug" : "geom_rug(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_segment" : "geom_segment(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_smooth" : "geom_smooth(mapping = NULL, data = NULL, stat = \"smooth\", position = \"identity\", ",
	"geom_step" : "geom_step(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_text" : "geom_text(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_tile" : "geom_tile(mapping = NULL, data = NULL, stat = \"identity\", position = \"identity\", ",
	"geom_violin" : "geom_violin(mapping = NULL, data = NULL, stat = \"ydensity\", position = \"dodge\", ",
	"geom_vline" : "geom_vline(mapping = NULL, data = NULL, stat = \"vline\", position = \"identity\", ",
	"gg_dep" : "gg_dep(version, msg) ",
	"ggfluctuation" : "ggfluctuation(table, type = \"size\", floor = 0, ceiling = max(table$freq, ",
	"ggmissing" : "ggmissing(data, avoid = \"stack\", order = TRUE, missing.only = TRUE) ",
	"ggorder" : "ggorder(data) ",
	"ggpcp" : "ggpcp(data, vars = names(data), ...) ",
	"ggplot" : "ggplot(data = NULL, ...) ",
	"ggplot_build" : "ggplot_build(plot) ",
	"ggplot_gtable" : "ggplot_gtable(data) ",
	"ggplotGrob" : "ggplotGrob(x) ",
	"ggsave" : "ggsave(filename = default_name(plot), plot = last_plot(), ",
	"ggstructure" : "ggstructure(data) ",
	"ggtitle" : "ggtitle(label) ",
	"guide_colorbar" : "guide_colorbar(title = waiver(), title.position = NULL, title.theme = NULL, ",
	"guide_colourbar" : "guide_colourbar(title = waiver(), title.position = NULL, title.theme = NULL, ",
	"guide_legend" : "guide_legend(title = waiver(), title.position = NULL, title.theme = NULL, ",
	"guides" : "guides(...) ",
	"is.coord" : "is.coord(x) ",
	"is.facet" : "is.facet(x) ",
	"is.ggplot" : "is.ggplot(x) ",
	"is.theme" : "is.theme(x) ",
	"label_both" : "label_both(variable, value) ",
	"label_bquote" : "label_bquote(expr = beta^.(x)) ",
	"label_parsed" : "label_parsed(variable, value) ",
	"label_value" : "label_value(variable, value) ",
	"label_wrap_gen" : "label_wrap_gen(width = 25) ",
	"labeller" : "labeller(..., keep.as.numeric = FALSE) ",
	"labs" : "labs(...) ",
	"last_plot" : "last_plot() ",
	"layer" : "layer(...) ",
	"map_data" : "map_data(map, region = \".\", exact = FALSE, ...) ",
	"mean_cl_boot" : "mean_cl_boot(x, ...) ",
	"mean_cl_normal" : "mean_cl_normal(x, ...) ",
	"mean_sdl" : "mean_sdl(x, ...) ",
	"mean_se" : "mean_se(x, mult = 1) ",
	"median_hilow" : "median_hilow(x, ...) ",
	"opts" : "opts(...) ",
	"plotmatrix" : "plotmatrix(data, mapping = aes(), colour = \"black\") ",
	"position_dodge" : "position_dodge(width = NULL, height = NULL) ",
	"position_fill" : "position_fill(width = NULL, height = NULL) ",
	"position_identity" : "position_identity(width = NULL, height = NULL) ",
	"position_jitter" : "position_jitter(width = NULL, height = NULL) ",
	"position_jitterdodge" : "position_jitterdodge(jitter.width = NULL, jitter.height = NULL, dodge.width = NULL) ",
	"position_stack" : "position_stack(width = NULL, height = NULL) ",
	"qplot" : "qplot(x, y = NULL, ..., data, facets = NULL, margins = FALSE, ",
	"quickplot" : "quickplot(x, y = NULL, ..., data, facets = NULL, margins = FALSE, ",
	"resolution" : "resolution(x, zero = TRUE) ",
	"scale_alpha" : "scale_alpha(..., range = c(0.1, 1)) ",
	"scale_alpha_continuous" : "scale_alpha_continuous(..., range = c(0.1, 1)) ",
	"scale_alpha_discrete" : "scale_alpha_discrete(..., range = c(0.1, 1)) ",
	"scale_alpha_identity" : "scale_alpha_identity(..., guide = \"none\") ",
	"scale_alpha_manual" : "scale_alpha_manual(..., values) ",
	"scale_area" : "scale_area(..., range = c(1, 6)) ",
	"scale_color_brewer" : "scale_color_brewer(..., type = \"seq\", palette = 1) ",
	"scale_color_continuous" : "scale_color_continuous(..., low = \"#132B43\", high = \"#56B1F7\", space = \"Lab\", ",
	"scale_color_discrete" : "scale_color_discrete(..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, ",
	"scale_color_distiller" : "scale_color_distiller(..., type = \"seq\", palette = 1, values = NULL, space = \"Lab\", ",
	"scale_color_gradient" : "scale_color_gradient(..., low = \"#132B43\", high = \"#56B1F7\", space = \"Lab\", ",
	"scale_color_gradientn" : "scale_color_gradientn(..., colours, values = NULL, space = \"Lab\", na.value = \"grey50\", ",
	"scale_color_grey" : "scale_color_grey(..., start = 0.2, end = 0.8, na.value = \"red\") ",
	"scale_color_hue" : "scale_color_hue(..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, ",
	"scale_color_identity" : "scale_color_identity(..., guide = \"none\") ",
	"scale_color_manual" : "scale_color_manual(..., values) ",
	"scale_colour_brewer" : "scale_colour_brewer(..., type = \"seq\", palette = 1) ",
	"scale_colour_continuous" : "scale_colour_continuous(..., low = \"#132B43\", high = \"#56B1F7\", space = \"Lab\", ",
	"scale_colour_discrete" : "scale_colour_discrete(..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, ",
	"scale_colour_distiller" : "scale_colour_distiller(..., type = \"seq\", palette = 1, values = NULL, space = \"Lab\", ",
	"scale_colour_gradient" : "scale_colour_gradient(..., low = \"#132B43\", high = \"#56B1F7\", space = \"Lab\", ",
	"scale_colour_gradientn" : "scale_colour_gradientn(..., colours, values = NULL, space = \"Lab\", na.value = \"grey50\", ",
	"scale_colour_grey" : "scale_colour_grey(..., start = 0.2, end = 0.8, na.value = \"red\") ",
	"scale_colour_hue" : "scale_colour_hue(..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, ",
	"scale_colour_identity" : "scale_colour_identity(..., guide = \"none\") ",
	"scale_colour_manual" : "scale_colour_manual(..., values) ",
	"scale_fill_brewer" : "scale_fill_brewer(..., type = \"seq\", palette = 1) ",
	"scale_fill_continuous" : "scale_fill_continuous(..., low = \"#132B43\", high = \"#56B1F7\", space = \"Lab\", ",
	"scale_fill_discrete" : "scale_fill_discrete(..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, ",
	"scale_fill_distiller" : "scale_fill_distiller(..., type = \"seq\", palette = 1, values = NULL, space = \"Lab\", ",
	"scale_fill_gradient" : "scale_fill_gradient(..., low = \"#132B43\", high = \"#56B1F7\", space = \"Lab\", ",
	"scale_fill_gradientn" : "scale_fill_gradientn(..., colours, values = NULL, space = \"Lab\", na.value = \"grey50\", ",
	"scale_fill_grey" : "scale_fill_grey(..., start = 0.2, end = 0.8, na.value = \"grey50\") ",
	"scale_fill_hue" : "scale_fill_hue(..., h = c(0, 360) + 15, c = 100, l = 65, h.start = 0, ",
	"scale_fill_identity" : "scale_fill_identity(..., guide = \"none\") ",
	"scale_fill_manual" : "scale_fill_manual(..., values) ",
	"scale_linetype" : "scale_linetype(..., na.value = \"blank\") ",
	"scale_linetype_continuous" : "scale_linetype_continuous(...) ",
	"scale_linetype_discrete" : "scale_linetype_discrete(..., na.value = \"blank\") ",
	"scale_linetype_identity" : "scale_linetype_identity(..., guide = \"none\") ",
	"scale_linetype_manual" : "scale_linetype_manual(..., values) ",
	"scale_shape" : "scale_shape(..., solid = TRUE) ",
	"scale_shape_continuous" : "scale_shape_continuous(...) ",
	"scale_shape_discrete" : "scale_shape_discrete(..., solid = TRUE) ",
	"scale_shape_identity" : "scale_shape_identity(..., guide = \"none\") ",
	"scale_shape_manual" : "scale_shape_manual(..., values) ",
	"scale_size" : "scale_size(..., range = c(1, 6)) ",
	"scale_size_area" : "scale_size_area(..., max_size = 6) ",
	"scale_size_continuous" : "scale_size_continuous(..., range = c(1, 6)) ",
	"scale_size_discrete" : "scale_size_discrete(..., range = c(1, 6)) ",
	"scale_size_identity" : "scale_size_identity(..., guide = \"none\") ",
	"scale_size_manual" : "scale_size_manual(..., values) ",
	"scale_x_continuous" : "scale_x_continuous(..., expand = waiver()) ",
	"scale_x_date" : "scale_x_date(..., expand = waiver(), breaks = pretty_breaks(), minor_breaks = waiver()) ",
	"scale_x_datetime" : "scale_x_datetime(..., expand = waiver(), breaks = pretty_breaks(), minor_breaks = waiver()) ",
	"scale_x_discrete" : "scale_x_discrete(..., expand = waiver()) ",
	"scale_x_reverse" : "scale_x_reverse(...) ",
	"scale_x_sqrt" : "scale_x_sqrt(...) ",
	"scale_y_continuous" : "scale_y_continuous(..., expand = waiver()) ",
	"scale_y_date" : "scale_y_date(..., expand = waiver(), breaks = pretty_breaks(), minor_breaks = waiver()) ",
	"scale_y_datetime" : "scale_y_datetime(..., expand = waiver(), breaks = pretty_breaks(), minor_breaks = waiver()) ",
	"scale_y_discrete" : "scale_y_discrete(..., expand = waiver()) ",
	"scale_y_reverse" : "scale_y_reverse(...) ",
	"scale_y_sqrt" : "scale_y_sqrt(...) ",
	"should_stop" : "should_stop(expr) ",
	"stat_abline" : "stat_abline(mapping = NULL, data = NULL, geom = \"abline\", position = \"identity\", ",
	"stat_bin" : "stat_bin(mapping = NULL, data = NULL, geom = \"bar\", position = \"stack\", ",
	"stat_bindot" : "stat_bindot(mapping = NULL, data = NULL, geom = \"dotplot\", position = \"identity\", ",
	"stat_binhex" : "stat_binhex(mapping = NULL, data = NULL, geom = \"hex\", position = \"identity\", ",
	"stat_boxplot" : "stat_boxplot(mapping = NULL, data = NULL, geom = \"boxplot\", position = \"dodge\", ",
	"stat_contour" : "stat_contour(mapping = NULL, data = NULL, geom = \"path\", position = \"identity\", ",
	"stat_density" : "stat_density(mapping = NULL, data = NULL, geom = \"area\", position = \"stack\", ",
	"stat_ecdf" : "stat_ecdf(mapping = NULL, data = NULL, geom = \"step\", position = \"identity\", ",
	"stat_ellipse" : "stat_ellipse(mapping = NULL, data = NULL, geom = \"path\", position = \"identity\", ",
	"stat_function" : "stat_function(mapping = NULL, data = NULL, geom = \"path\", position = \"identity\", ",
	"stat_hline" : "stat_hline(mapping = NULL, data = NULL, geom = \"hline\", position = \"identity\", ",
	"stat_identity" : "stat_identity(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\", ",
	"stat_qq" : "stat_qq(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\", ",
	"stat_quantile" : "stat_quantile(mapping = NULL, data = NULL, geom = \"quantile\", position = \"identity\", ",
	"stat_smooth" : "stat_smooth(mapping = NULL, data = NULL, geom = \"smooth\", position = \"identity\", ",
	"stat_spoke" : "stat_spoke(mapping = NULL, data = NULL, geom = \"segment\", position = \"identity\", ",
	"stat_sum" : "stat_sum(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\", ",
	"stat_summary" : "stat_summary(mapping = NULL, data = NULL, geom = \"pointrange\", position = \"identity\", ",
	"stat_summary_hex" : "stat_summary_hex(mapping = NULL, data = NULL, geom = \"hex\", position = \"identity\", ",
	"stat_unique" : "stat_unique(mapping = NULL, data = NULL, geom = \"point\", position = \"identity\", ",
	"stat_vline" : "stat_vline(mapping = NULL, data = NULL, geom = \"vline\", position = \"identity\", ",
	"stat_ydensity" : "stat_ydensity(mapping = NULL, data = NULL, geom = \"violin\", position = \"dodge\", ",
	"theme" : "theme(..., complete = FALSE) ",
	"theme_blank" : "theme_blank(...) ",
	"theme_bw" : "theme_bw(base_size = 12, base_family = \"\") ",
	"theme_classic" : "theme_classic(base_size = 12, base_family = \"\") ",
	"theme_get" : "theme_get() ",
	"theme_gray" : "theme_gray(base_size = 12, base_family = \"\") ",
	"theme_grey" : "theme_grey(base_size = 12, base_family = \"\") ",
	"theme_light" : "theme_light(base_size = 12, base_family = \"\") ",
	"theme_line" : "theme_line(...) ",
	"theme_linedraw" : "theme_linedraw(base_size = 12, base_family = \"\") ",
	"theme_minimal" : "theme_minimal(base_size = 12, base_family = \"\") ",
	"theme_rect" : "theme_rect(...) ",
	"theme_segment" : "theme_segment(...) ",
	"theme_set" : "theme_set(new) ",
	"theme_text" : "theme_text(...) ",
	"theme_update" : "theme_update(...) ",
	"update_element" : "update_element(name, ...) ",
	"update_geom_defaults" : "update_geom_defaults(geom, new) ",
	"update_labels" : "update_labels(p, labels) ",
	"update_stat_defaults" : "update_stat_defaults(stat, new) ",
	"waiver" : "waiver() ",
	"xlab" : "xlab(label) ",
	"xlim" : "xlim(...) ",
	"ylab" : "ylab(label) ",
	"ylim" : "ylim(...) "
}